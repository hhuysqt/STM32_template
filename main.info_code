
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 81 2f 00 08 c5 2f 00 08 c5 2f 00 08     .P. ./.../.../..
 8000010:	c5 2f 00 08 c5 2f 00 08 c5 2f 00 08 00 00 00 00     ./.../.../......
	...
 800002c:	c5 2f 00 08 c5 2f 00 08 00 00 00 00 c5 2f 00 08     ./.../......./..
 800003c:	c5 2f 00 08 c5 2f 00 08 c5 2f 00 08 c5 2f 00 08     ./.../.../.../..
 800004c:	c5 2f 00 08 c5 2f 00 08 c5 2f 00 08 c5 2f 00 08     ./.../.../.../..
 800005c:	c5 2f 00 08 c5 2f 00 08 c5 2f 00 08 c5 2f 00 08     ./.../.../.../..
 800006c:	c5 2f 00 08 c5 2f 00 08 c5 2f 00 08 c5 2f 00 08     ./.../.../.../..
 800007c:	c5 2f 00 08 c5 2f 00 08 c5 2f 00 08 c5 2f 00 08     ./.../.../.../..
 800008c:	c5 2f 00 08 c5 2f 00 08 c5 2f 00 08 c5 2f 00 08     ./.../.../.../..
 800009c:	c5 2f 00 08 c5 2f 00 08 c5 2f 00 08 c5 2f 00 08     ./.../.../.../..
 80000ac:	c5 2f 00 08 c5 2f 00 08 c5 2f 00 08 c5 2f 00 08     ./.../.../.../..
 80000bc:	c5 2f 00 08 c5 2f 00 08 c5 2f 00 08 c5 2f 00 08     ./.../.../.../..
 80000cc:	c5 2f 00 08 c5 2f 00 08 c5 2f 00 08 c5 2f 00 08     ./.../.../.../..
 80000dc:	c5 2f 00 08 c5 2f 00 08 c5 2f 00 08 c5 2f 00 08     ./.../.../.../..
	...
 8000108:	5f f8 08 f1                                         _...

0800010c <InitWorld>:
#define LED_PIN GPIO_Pin_0
#define LED_ON GPIO_ResetBits(GPIOB, LED_PIN);
#define LED_OFF GPIO_SetBits(GPIOB, LED_PIN);

void InitWorld(void)
{
 800010c:	b580      	push	{r7, lr}
 800010e:	b084      	sub	sp, #16
 8000110:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef tim2_base;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000112:	2001      	movs	r0, #1
 8000114:	2101      	movs	r1, #1
 8000116:	f000 fe3f 	bl	8000d98 <RCC_APB1PeriphClockCmd>
	
	TIM_DeInit(TIM2);
 800011a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800011e:	f000 ff39 	bl	8000f94 <TIM_DeInit>
	tim2_base.TIM_Prescaler = 71;
 8000122:	2347      	movs	r3, #71	; 0x47
 8000124:	80bb      	strh	r3, [r7, #4]
	tim2_base.TIM_CounterMode = TIM_CounterMode_Up;
 8000126:	2300      	movs	r3, #0
 8000128:	80fb      	strh	r3, [r7, #6]
	tim2_base.TIM_ClockDivision = 0;
 800012a:	2300      	movs	r3, #0
 800012c:	817b      	strh	r3, [r7, #10]
	tim2_base.TIM_Period = 1000; 
 800012e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000132:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM2, &tim2_base);
 8000134:	1d3b      	adds	r3, r7, #4
 8000136:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800013a:	4619      	mov	r1, r3
 800013c:	f001 f840 	bl	80011c0 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 8000140:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000144:	2101      	movs	r1, #1
 8000146:	f001 fc03 	bl	8001950 <TIM_Cmd>
}
 800014a:	3710      	adds	r7, #16
 800014c:	46bd      	mov	sp, r7
 800014e:	bd80      	pop	{r7, pc}

08000150 <delay_ms>:

void delay_ms(u16 n)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	80fb      	strh	r3, [r7, #6]
	while(n--)
 800015a:	e00d      	b.n	8000178 <delay_ms+0x28>
	{
		while(TIM_GetFlagStatus(TIM2, TIM_FLAG_Update) != SET);
 800015c:	bf00      	nop
 800015e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000162:	2101      	movs	r1, #1
 8000164:	f002 fbbc 	bl	80028e0 <TIM_GetFlagStatus>
 8000168:	4603      	mov	r3, r0
 800016a:	2b01      	cmp	r3, #1
 800016c:	d1f7      	bne.n	800015e <delay_ms+0xe>
		TIM_ClearFlag(TIM2, TIM_FLAG_Update);
 800016e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000172:	2101      	movs	r1, #1
 8000174:	f002 fbd0 	bl	8002918 <TIM_ClearFlag>
	TIM_Cmd(TIM2, ENABLE);
}

void delay_ms(u16 n)
{
	while(n--)
 8000178:	88fb      	ldrh	r3, [r7, #6]
 800017a:	1e5a      	subs	r2, r3, #1
 800017c:	80fa      	strh	r2, [r7, #6]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d1ec      	bne.n	800015c <delay_ms+0xc>
	{
		while(TIM_GetFlagStatus(TIM2, TIM_FLAG_Update) != SET);
		TIM_ClearFlag(TIM2, TIM_FLAG_Update);
	}
}
 8000182:	3708      	adds	r7, #8
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}

08000188 <main>:

int main()
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
	InitWorld();
 800018e:	f7ff ffbd 	bl	800010c <InitWorld>

	{
		GPIO_InitTypeDef LEDIO;
		
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000192:	2008      	movs	r0, #8
 8000194:	2101      	movs	r1, #1
 8000196:	f000 fde1 	bl	8000d5c <RCC_APB2PeriphClockCmd>
		
		LEDIO.GPIO_Mode = GPIO_Mode_Out_OD;
 800019a:	2314      	movs	r3, #20
 800019c:	71fb      	strb	r3, [r7, #7]
		LEDIO.GPIO_Speed = GPIO_Speed_50MHz;
 800019e:	2303      	movs	r3, #3
 80001a0:	71bb      	strb	r3, [r7, #6]
		LEDIO.GPIO_Pin = LED_PIN;
 80001a2:	2301      	movs	r3, #1
 80001a4:	80bb      	strh	r3, [r7, #4]
		
		GPIO_Init(GPIOB, &LEDIO);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	480a      	ldr	r0, [pc, #40]	; (80001d4 <main+0x4c>)
 80001aa:	4619      	mov	r1, r3
 80001ac:	f000 f892 	bl	80002d4 <GPIO_Init>
	}

	while(1)
	{
		delay_ms(500);
 80001b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b4:	f7ff ffcc 	bl	8000150 <delay_ms>
		LED_ON;
 80001b8:	4806      	ldr	r0, [pc, #24]	; (80001d4 <main+0x4c>)
 80001ba:	2101      	movs	r1, #1
 80001bc:	f000 f9b8 	bl	8000530 <GPIO_ResetBits>
		delay_ms(500);
 80001c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001c4:	f7ff ffc4 	bl	8000150 <delay_ms>
		LED_OFF;
 80001c8:	4802      	ldr	r0, [pc, #8]	; (80001d4 <main+0x4c>)
 80001ca:	2101      	movs	r1, #1
 80001cc:	f000 f9a2 	bl	8000514 <GPIO_SetBits>
	}
 80001d0:	e7ee      	b.n	80001b0 <main+0x28>
 80001d2:	bf00      	nop
 80001d4:	40010c00 	.word	0x40010c00

080001d8 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	4b2f      	ldr	r3, [pc, #188]	; (80002a0 <GPIO_DeInit+0xc8>)
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d108      	bne.n	80001fa <GPIO_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80001e8:	2004      	movs	r0, #4
 80001ea:	2101      	movs	r1, #1
 80001ec:	f000 fdf2 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 80001f0:	2004      	movs	r0, #4
 80001f2:	2100      	movs	r1, #0
 80001f4:	f000 fdee 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 80001f8:	e04e      	b.n	8000298 <GPIO_DeInit+0xc0>
  }
  else if (GPIOx == GPIOB)
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <GPIO_DeInit+0xcc>)
 80001fe:	429a      	cmp	r2, r3
 8000200:	d108      	bne.n	8000214 <GPIO_DeInit+0x3c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000202:	2008      	movs	r0, #8
 8000204:	2101      	movs	r1, #1
 8000206:	f000 fde5 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 800020a:	2008      	movs	r0, #8
 800020c:	2100      	movs	r1, #0
 800020e:	f000 fde1 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 8000212:	e041      	b.n	8000298 <GPIO_DeInit+0xc0>
  }
  else if (GPIOx == GPIOC)
 8000214:	687a      	ldr	r2, [r7, #4]
 8000216:	4b24      	ldr	r3, [pc, #144]	; (80002a8 <GPIO_DeInit+0xd0>)
 8000218:	429a      	cmp	r2, r3
 800021a:	d108      	bne.n	800022e <GPIO_DeInit+0x56>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800021c:	2010      	movs	r0, #16
 800021e:	2101      	movs	r1, #1
 8000220:	f000 fdd8 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8000224:	2010      	movs	r0, #16
 8000226:	2100      	movs	r1, #0
 8000228:	f000 fdd4 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 800022c:	e034      	b.n	8000298 <GPIO_DeInit+0xc0>
  }
  else if (GPIOx == GPIOD)
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <GPIO_DeInit+0xd4>)
 8000232:	429a      	cmp	r2, r3
 8000234:	d108      	bne.n	8000248 <GPIO_DeInit+0x70>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8000236:	2020      	movs	r0, #32
 8000238:	2101      	movs	r1, #1
 800023a:	f000 fdcb 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 800023e:	2020      	movs	r0, #32
 8000240:	2100      	movs	r1, #0
 8000242:	f000 fdc7 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 8000246:	e027      	b.n	8000298 <GPIO_DeInit+0xc0>
  }    
  else if (GPIOx == GPIOE)
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <GPIO_DeInit+0xd8>)
 800024c:	429a      	cmp	r2, r3
 800024e:	d108      	bne.n	8000262 <GPIO_DeInit+0x8a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8000250:	2040      	movs	r0, #64	; 0x40
 8000252:	2101      	movs	r1, #1
 8000254:	f000 fdbe 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8000258:	2040      	movs	r0, #64	; 0x40
 800025a:	2100      	movs	r1, #0
 800025c:	f000 fdba 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 8000260:	e01a      	b.n	8000298 <GPIO_DeInit+0xc0>
  } 
  else if (GPIOx == GPIOF)
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <GPIO_DeInit+0xdc>)
 8000266:	429a      	cmp	r2, r3
 8000268:	d108      	bne.n	800027c <GPIO_DeInit+0xa4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 800026a:	2080      	movs	r0, #128	; 0x80
 800026c:	2101      	movs	r1, #1
 800026e:	f000 fdb1 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8000272:	2080      	movs	r0, #128	; 0x80
 8000274:	2100      	movs	r1, #0
 8000276:	f000 fdad 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 800027a:	e00d      	b.n	8000298 <GPIO_DeInit+0xc0>
  }
  else
  {
    if (GPIOx == GPIOG)
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <GPIO_DeInit+0xe0>)
 8000280:	429a      	cmp	r2, r3
 8000282:	d109      	bne.n	8000298 <GPIO_DeInit+0xc0>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8000284:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000288:	2101      	movs	r1, #1
 800028a:	f000 fda3 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 800028e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000292:	2100      	movs	r1, #0
 8000294:	f000 fd9e 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800
 80002a4:	40010c00 	.word	0x40010c00
 80002a8:	40011000 	.word	0x40011000
 80002ac:	40011400 	.word	0x40011400
 80002b0:	40011800 	.word	0x40011800
 80002b4:	40011c00 	.word	0x40011c00
 80002b8:	40012000 	.word	0x40012000

080002bc <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 80002c0:	2001      	movs	r0, #1
 80002c2:	2101      	movs	r1, #1
 80002c4:	f000 fd86 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 80002c8:	2001      	movs	r0, #1
 80002ca:	2100      	movs	r1, #0
 80002cc:	f000 fd82 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
}
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop

080002d4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b089      	sub	sp, #36	; 0x24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80002de:	2300      	movs	r3, #0
 80002e0:	61fb      	str	r3, [r7, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	613b      	str	r3, [r7, #16]
 80002e6:	2300      	movs	r3, #0
 80002e8:	61bb      	str	r3, [r7, #24]
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	78db      	ldrb	r3, [r3, #3]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	78db      	ldrb	r3, [r3, #3]
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	2b00      	cmp	r3, #0
 800030a:	d004      	beq.n	8000316 <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	789b      	ldrb	r3, [r3, #2]
 8000310:	69fa      	ldr	r2, [r7, #28]
 8000312:	4313      	orrs	r3, r2
 8000314:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	2b00      	cmp	r3, #0
 800031e:	d044      	beq.n	80003aa <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000326:	2300      	movs	r3, #0
 8000328:	61bb      	str	r3, [r7, #24]
 800032a:	e038      	b.n	800039e <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800032c:	69bb      	ldr	r3, [r7, #24]
 800032e:	2201      	movs	r2, #1
 8000330:	fa02 f303 	lsl.w	r3, r2, r3
 8000334:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	461a      	mov	r2, r3
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	4013      	ands	r3, r2
 8000340:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000342:	693a      	ldr	r2, [r7, #16]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	429a      	cmp	r2, r3
 8000348:	d126      	bne.n	8000398 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 800034a:	69bb      	ldr	r3, [r7, #24]
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	220f      	movs	r2, #15
 8000354:	fa02 f303 	lsl.w	r3, r2, r3
 8000358:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	43db      	mvns	r3, r3
 800035e:	697a      	ldr	r2, [r7, #20]
 8000360:	4013      	ands	r3, r2
 8000362:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	69fa      	ldr	r2, [r7, #28]
 8000368:	fa02 f303 	lsl.w	r3, r2, r3
 800036c:	697a      	ldr	r2, [r7, #20]
 800036e:	4313      	orrs	r3, r2
 8000370:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	78db      	ldrb	r3, [r3, #3]
 8000376:	2b28      	cmp	r3, #40	; 0x28
 8000378:	d105      	bne.n	8000386 <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800037a:	69bb      	ldr	r3, [r7, #24]
 800037c:	2201      	movs	r2, #1
 800037e:	409a      	lsls	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	615a      	str	r2, [r3, #20]
 8000384:	e008      	b.n	8000398 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	78db      	ldrb	r3, [r3, #3]
 800038a:	2b48      	cmp	r3, #72	; 0x48
 800038c:	d104      	bne.n	8000398 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	2201      	movs	r2, #1
 8000392:	409a      	lsls	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000398:	69bb      	ldr	r3, [r7, #24]
 800039a:	3301      	adds	r3, #1
 800039c:	61bb      	str	r3, [r7, #24]
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	2b07      	cmp	r3, #7
 80003a2:	d9c3      	bls.n	800032c <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	697a      	ldr	r2, [r7, #20]
 80003a8:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	2bff      	cmp	r3, #255	; 0xff
 80003b0:	d946      	bls.n	8000440 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003b8:	2300      	movs	r3, #0
 80003ba:	61bb      	str	r3, [r7, #24]
 80003bc:	e03a      	b.n	8000434 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80003be:	69bb      	ldr	r3, [r7, #24]
 80003c0:	3308      	adds	r3, #8
 80003c2:	2201      	movs	r2, #1
 80003c4:	fa02 f303 	lsl.w	r3, r2, r3
 80003c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	461a      	mov	r2, r3
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	4013      	ands	r3, r2
 80003d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80003d6:	693a      	ldr	r2, [r7, #16]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d127      	bne.n	800042e <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 80003de:	69bb      	ldr	r3, [r7, #24]
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	220f      	movs	r2, #15
 80003e8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	43db      	mvns	r3, r3
 80003f2:	697a      	ldr	r2, [r7, #20]
 80003f4:	4013      	ands	r3, r2
 80003f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	69fa      	ldr	r2, [r7, #28]
 80003fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000400:	697a      	ldr	r2, [r7, #20]
 8000402:	4313      	orrs	r3, r2
 8000404:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	78db      	ldrb	r3, [r3, #3]
 800040a:	2b28      	cmp	r3, #40	; 0x28
 800040c:	d105      	bne.n	800041a <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800040e:	69bb      	ldr	r3, [r7, #24]
 8000410:	3308      	adds	r3, #8
 8000412:	2201      	movs	r2, #1
 8000414:	409a      	lsls	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	78db      	ldrb	r3, [r3, #3]
 800041e:	2b48      	cmp	r3, #72	; 0x48
 8000420:	d105      	bne.n	800042e <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	3308      	adds	r3, #8
 8000426:	2201      	movs	r2, #1
 8000428:	409a      	lsls	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	3301      	adds	r3, #1
 8000432:	61bb      	str	r3, [r7, #24]
 8000434:	69bb      	ldr	r3, [r7, #24]
 8000436:	2b07      	cmp	r3, #7
 8000438:	d9c1      	bls.n	80003be <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	697a      	ldr	r2, [r7, #20]
 800043e:	605a      	str	r2, [r3, #4]
  }
}
 8000440:	3724      	adds	r7, #36	; 0x24
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop

0800044c <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800045a:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2202      	movs	r2, #2
 8000460:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2204      	movs	r2, #4
 8000466:	70da      	strb	r2, [r3, #3]
}
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	460b      	mov	r3, r1
 800047e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000480:	2300      	movs	r3, #0
 8000482:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	689a      	ldr	r2, [r3, #8]
 8000488:	887b      	ldrh	r3, [r7, #2]
 800048a:	4013      	ands	r3, r2
 800048c:	2b00      	cmp	r3, #0
 800048e:	d002      	beq.n	8000496 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000490:	2301      	movs	r3, #1
 8000492:	73fb      	strb	r3, [r7, #15]
 8000494:	e001      	b.n	800049a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000496:	2300      	movs	r3, #0
 8000498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800049a:	7bfb      	ldrb	r3, [r7, #15]
}
 800049c:	4618      	mov	r0, r3
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	b29b      	uxth	r3, r3
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	68da      	ldr	r2, [r3, #12]
 80004d8:	887b      	ldrh	r3, [r7, #2]
 80004da:	4013      	ands	r3, r2
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d002      	beq.n	80004e6 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80004e0:	2301      	movs	r3, #1
 80004e2:	73fb      	strb	r3, [r7, #15]
 80004e4:	e001      	b.n	80004ea <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80004e6:	2300      	movs	r3, #0
 80004e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	b29b      	uxth	r3, r3
}
 8000506:	4618      	mov	r0, r3
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000520:	887a      	ldrh	r2, [r7, #2]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	611a      	str	r2, [r3, #16]
}
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800053c:	887a      	ldrh	r2, [r7, #2]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	615a      	str	r2, [r3, #20]
}
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	4613      	mov	r3, r2
 8000556:	460a      	mov	r2, r1
 8000558:	807a      	strh	r2, [r7, #2]
 800055a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800055c:	787b      	ldrb	r3, [r7, #1]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d003      	beq.n	800056a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000562:	887a      	ldrh	r2, [r7, #2]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	611a      	str	r2, [r3, #16]
 8000568:	e002      	b.n	8000570 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 800056a:	887a      	ldrh	r2, [r7, #2]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	615a      	str	r2, [r3, #20]
  }
}
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8000588:	887a      	ldrh	r2, [r7, #2]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	60da      	str	r2, [r3, #12]
}
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80005aa:	887b      	ldrh	r3, [r7, #2]
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80005b8:	887a      	ldrh	r2, [r7, #2]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	60fb      	str	r3, [r7, #12]
}
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4602      	mov	r2, r0
 80005e4:	460b      	mov	r3, r1
 80005e6:	71fa      	strb	r2, [r7, #7]
 80005e8:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <GPIO_EventOutputConfig+0x44>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80005fa:	4013      	ands	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	4313      	orrs	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	4313      	orrs	r3, r2
 800060e:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <GPIO_EventOutputConfig+0x44>)
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	601a      	str	r2, [r3, #0]
}
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40010000 	.word	0x40010000

08000624 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <GPIO_EventOutputCmd+0x1c>)
 8000630:	79fa      	ldrb	r2, [r7, #7]
 8000632:	601a      	str	r2, [r3, #0]
}
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	4220001c 	.word	0x4220001c

08000644 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000644:	b480      	push	{r7}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	da03      	bge.n	800066e <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8000666:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <GPIO_PinRemapConfig+0xdc>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	e002      	b.n	8000674 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 800066e:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <GPIO_PinRemapConfig+0xdc>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800067a:	0c1b      	lsrs	r3, r3, #16
 800067c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	b29b      	uxth	r3, r3
 8000682:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800068a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800068e:	d10a      	bne.n	80006a6 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000696:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <GPIO_PinRemapConfig+0xdc>)
 800069a:	4a21      	ldr	r2, [pc, #132]	; (8000720 <GPIO_PinRemapConfig+0xdc>)
 800069c:	6852      	ldr	r2, [r2, #4]
 800069e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	e021      	b.n	80006ea <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00e      	beq.n	80006ce <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	2203      	movs	r2, #3
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	43db      	mvns	r3, r3
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	4013      	ands	r3, r2
 80006c2:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e00d      	b.n	80006ea <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	0d5b      	lsrs	r3, r3, #21
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	43db      	mvns	r3, r3
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	4013      	ands	r3, r2
 80006e0:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80006e8:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 80006ea:	78fb      	ldrb	r3, [r7, #3]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d008      	beq.n	8000702 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	0d5b      	lsrs	r3, r3, #21
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	4313      	orrs	r3, r2
 8000700:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	da03      	bge.n	8000710 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <GPIO_PinRemapConfig+0xdc>)
 800070a:	697a      	ldr	r2, [r7, #20]
 800070c:	61da      	str	r2, [r3, #28]
 800070e:	e002      	b.n	8000716 <GPIO_PinRemapConfig+0xd2>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <GPIO_PinRemapConfig+0xdc>)
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	605a      	str	r2, [r3, #4]
  }  
}
 8000716:	371c      	adds	r7, #28
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	40010000 	.word	0x40010000

08000724 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000724:	b490      	push	{r4, r7}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4602      	mov	r2, r0
 800072c:	460b      	mov	r3, r1
 800072e:	71fa      	strb	r2, [r7, #7]
 8000730:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	f003 0303 	and.w	r3, r3, #3
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	220f      	movs	r2, #15
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <GPIO_EXTILineConfig+0x78>)
 8000748:	79ba      	ldrb	r2, [r7, #6]
 800074a:	0892      	lsrs	r2, r2, #2
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	4913      	ldr	r1, [pc, #76]	; (800079c <GPIO_EXTILineConfig+0x78>)
 8000750:	79b8      	ldrb	r0, [r7, #6]
 8000752:	0880      	lsrs	r0, r0, #2
 8000754:	b2c0      	uxtb	r0, r0
 8000756:	3002      	adds	r0, #2
 8000758:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800075c:	68f9      	ldr	r1, [r7, #12]
 800075e:	43c9      	mvns	r1, r1
 8000760:	4001      	ands	r1, r0
 8000762:	3202      	adds	r2, #2
 8000764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <GPIO_EXTILineConfig+0x78>)
 800076a:	79ba      	ldrb	r2, [r7, #6]
 800076c:	0892      	lsrs	r2, r2, #2
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	490a      	ldr	r1, [pc, #40]	; (800079c <GPIO_EXTILineConfig+0x78>)
 8000772:	79b8      	ldrb	r0, [r7, #6]
 8000774:	0880      	lsrs	r0, r0, #2
 8000776:	b2c0      	uxtb	r0, r0
 8000778:	3002      	adds	r0, #2
 800077a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800077e:	79fc      	ldrb	r4, [r7, #7]
 8000780:	79b9      	ldrb	r1, [r7, #6]
 8000782:	f001 0103 	and.w	r1, r1, #3
 8000786:	0089      	lsls	r1, r1, #2
 8000788:	fa04 f101 	lsl.w	r1, r4, r1
 800078c:	4301      	orrs	r1, r0
 800078e:	3202      	adds	r2, #2
 8000790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bc90      	pop	{r4, r7}
 800079a:	4770      	bx	lr
 800079c:	40010000 	.word	0x40010000

080007a0 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <GPIO_ETH_MediaInterfaceConfig+0x18>)
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	601a      	str	r2, [r3, #0]
}
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	422000dc 	.word	0x422000dc

080007bc <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <RCC_DeInit+0x54>)
 80007c2:	4a13      	ldr	r2, [pc, #76]	; (8000810 <RCC_DeInit+0x54>)
 80007c4:	6812      	ldr	r2, [r2, #0]
 80007c6:	f042 0201 	orr.w	r2, r2, #1
 80007ca:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80007cc:	4a10      	ldr	r2, [pc, #64]	; (8000810 <RCC_DeInit+0x54>)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <RCC_DeInit+0x54>)
 80007d0:	6859      	ldr	r1, [r3, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <RCC_DeInit+0x58>)
 80007d4:	400b      	ands	r3, r1
 80007d6:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <RCC_DeInit+0x54>)
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <RCC_DeInit+0x54>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <RCC_DeInit+0x54>)
 80007ea:	4a09      	ldr	r2, [pc, #36]	; (8000810 <RCC_DeInit+0x54>)
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80007f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <RCC_DeInit+0x54>)
 80007f6:	4a06      	ldr	r2, [pc, #24]	; (8000810 <RCC_DeInit+0x54>)
 80007f8:	6852      	ldr	r2, [r2, #4]
 80007fa:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80007fe:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <RCC_DeInit+0x54>)
 8000802:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000806:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40021000 	.word	0x40021000
 8000814:	f8ff0000 	.word	0xf8ff0000

08000818 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <RCC_HSEConfig+0x58>)
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <RCC_HSEConfig+0x58>)
 8000824:	6812      	ldr	r2, [r2, #0]
 8000826:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800082a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <RCC_HSEConfig+0x58>)
 800082e:	4a10      	ldr	r2, [pc, #64]	; (8000870 <RCC_HSEConfig+0x58>)
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000836:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800083e:	d003      	beq.n	8000848 <RCC_HSEConfig+0x30>
 8000840:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000844:	d007      	beq.n	8000856 <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8000846:	e00d      	b.n	8000864 <RCC_HSEConfig+0x4c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <RCC_HSEConfig+0x58>)
 800084a:	4a09      	ldr	r2, [pc, #36]	; (8000870 <RCC_HSEConfig+0x58>)
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000852:	601a      	str	r2, [r3, #0]
      break;
 8000854:	e006      	b.n	8000864 <RCC_HSEConfig+0x4c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <RCC_HSEConfig+0x58>)
 8000858:	4a05      	ldr	r2, [pc, #20]	; (8000870 <RCC_HSEConfig+0x58>)
 800085a:	6812      	ldr	r2, [r2, #0]
 800085c:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8000860:	601a      	str	r2, [r3, #0]
      break;
 8000862:	bf00      	nop
      
    default:
      break;
  }
}
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800087e:	2300      	movs	r3, #0
 8000880:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000886:	2031      	movs	r0, #49	; 0x31
 8000888:	f000 fb10 	bl	8000eac <RCC_GetFlagStatus>
 800088c:	4603      	mov	r3, r0
 800088e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800089c:	d002      	beq.n	80008a4 <RCC_WaitForHSEStartUp+0x30>
 800089e:	79bb      	ldrb	r3, [r7, #6]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0f0      	beq.n	8000886 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80008a4:	2031      	movs	r0, #49	; 0x31
 80008a6:	f000 fb01 	bl	8000eac <RCC_GetFlagStatus>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 80008b0:	2301      	movs	r3, #1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	e001      	b.n	80008ba <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 80008b6:	2300      	movs	r3, #0
 80008b8:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <RCC_AdjustHSICalibrationValue+0x38>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80008de:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <RCC_AdjustHSICalibrationValue+0x38>)
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <RCC_HSICmd+0x1c>)
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	601a      	str	r2, [r3, #0]
}
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	42420000 	.word	0x42420000

08000920 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <RCC_PLLConfig+0x38>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800093a:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	4313      	orrs	r3, r2
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	4313      	orrs	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <RCC_PLLConfig+0x38>)
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	605a      	str	r2, [r3, #4]
}
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	40021000 	.word	0x40021000

0800095c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <RCC_PLLCmd+0x1c>)
 8000968:	79fa      	ldrb	r2, [r7, #7]
 800096a:	601a      	str	r2, [r3, #0]
}
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	42420060 	.word	0x42420060

0800097c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <RCC_SYSCLKConfig+0x34>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f023 0303 	bic.w	r3, r3, #3
 8000994:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4313      	orrs	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <RCC_SYSCLKConfig+0x34>)
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	605a      	str	r2, [r3, #4]
}
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000

080009b4 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <RCC_GetSYSCLKSource+0x1c>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	f003 030c 	and.w	r3, r3, #12
 80009c2:	b2db      	uxtb	r3, r3
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000

080009d4 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <RCC_HCLKConfig+0x34>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009ec:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <RCC_HCLKConfig+0x34>)
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	605a      	str	r2, [r3, #4]
}
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <RCC_PCLK1Config+0x34>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a24:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <RCC_PCLK1Config+0x34>)
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	605a      	str	r2, [r3, #4]
}
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <RCC_PCLK2Config+0x34>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a5c:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <RCC_PCLK2Config+0x34>)
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	605a      	str	r2, [r3, #4]
}
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	40021000 	.word	0x40021000

08000a7c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4602      	mov	r2, r0
 8000a84:	460b      	mov	r3, r1
 8000a86:	71fa      	strb	r2, [r7, #7]
 8000a88:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d008      	beq.n	8000aa2 <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <RCC_ITConfig+0x44>)
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <RCC_ITConfig+0x44>)
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	b2d1      	uxtb	r1, r2
 8000a98:	79fa      	ldrb	r2, [r7, #7]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	e009      	b.n	8000ab6 <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <RCC_ITConfig+0x44>)
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <RCC_ITConfig+0x44>)
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	b2d1      	uxtb	r1, r2
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	43d2      	mvns	r2, r2
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	400a      	ands	r2, r1
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	701a      	strb	r2, [r3, #0]
  }
}
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40021009 	.word	0x40021009

08000ac4 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <RCC_USBCLKConfig+0x18>)
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
}
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	424200d8 	.word	0x424200d8

08000ae0 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <RCC_ADCCLKConfig+0x34>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000af8:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <RCC_ADCCLKConfig+0x34>)
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	605a      	str	r2, [r3, #4]
}
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000

08000b18 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <RCC_LSEConfig+0x3c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <RCC_LSEConfig+0x3c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d002      	beq.n	8000b3a <RCC_LSEConfig+0x22>
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d004      	beq.n	8000b42 <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8000b38:	e007      	b.n	8000b4a <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <RCC_LSEConfig+0x3c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
      break;
 8000b40:	e003      	b.n	8000b4a <RCC_LSEConfig+0x32>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <RCC_LSEConfig+0x3c>)
 8000b44:	2205      	movs	r2, #5
 8000b46:	701a      	strb	r2, [r3, #0]
      break;            
 8000b48:	bf00      	nop
      
    default:
      break;      
  }
}
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40021020 	.word	0x40021020

08000b58 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <RCC_LSICmd+0x1c>)
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	601a      	str	r2, [r3, #0]
}
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	42420480 	.word	0x42420480

08000b78 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <RCC_RTCCLKConfig+0x20>)
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <RCC_RTCCLKConfig+0x20>)
 8000b84:	6a11      	ldr	r1, [r2, #32]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	621a      	str	r2, [r3, #32]
}
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <RCC_RTCCLKCmd+0x1c>)
 8000ba8:	79fa      	ldrb	r2, [r7, #7]
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	4242043c 	.word	0x4242043c

08000bbc <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b087      	sub	sp, #28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000bd4:	4b4d      	ldr	r3, [pc, #308]	; (8000d0c <RCC_GetClocksFreq+0x150>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
 8000bdc:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d007      	beq.n	8000bf4 <RCC_GetClocksFreq+0x38>
 8000be4:	2b08      	cmp	r3, #8
 8000be6:	d009      	beq.n	8000bfc <RCC_GetClocksFreq+0x40>
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d134      	bne.n	8000c56 <RCC_GetClocksFreq+0x9a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <RCC_GetClocksFreq+0x154>)
 8000bf0:	601a      	str	r2, [r3, #0]
      break;
 8000bf2:	e034      	b.n	8000c5e <RCC_GetClocksFreq+0xa2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a46      	ldr	r2, [pc, #280]	; (8000d10 <RCC_GetClocksFreq+0x154>)
 8000bf8:	601a      	str	r2, [r3, #0]
      break;
 8000bfa:	e030      	b.n	8000c5e <RCC_GetClocksFreq+0xa2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000bfc:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <RCC_GetClocksFreq+0x150>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000c04:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000c06:	4b41      	ldr	r3, [pc, #260]	; (8000d0c <RCC_GetClocksFreq+0x150>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	0c9b      	lsrs	r3, r3, #18
 8000c14:	3302      	adds	r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d106      	bne.n	8000c2c <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4a3c      	ldr	r2, [pc, #240]	; (8000d14 <RCC_GetClocksFreq+0x158>)
 8000c22:	fb02 f203 	mul.w	r2, r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	e013      	b.n	8000c54 <RCC_GetClocksFreq+0x98>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000c2c:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <RCC_GetClocksFreq+0x150>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4a36      	ldr	r2, [pc, #216]	; (8000d14 <RCC_GetClocksFreq+0x158>)
 8000c3c:	fb02 f203 	mul.w	r2, r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	e006      	b.n	8000c54 <RCC_GetClocksFreq+0x98>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	4a31      	ldr	r2, [pc, #196]	; (8000d10 <RCC_GetClocksFreq+0x154>)
 8000c4a:	fb02 f203 	mul.w	r2, r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000c52:	e004      	b.n	8000c5e <RCC_GetClocksFreq+0xa2>
 8000c54:	e003      	b.n	8000c5e <RCC_GetClocksFreq+0xa2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a2d      	ldr	r2, [pc, #180]	; (8000d10 <RCC_GetClocksFreq+0x154>)
 8000c5a:	601a      	str	r2, [r3, #0]
      break;
 8000c5c:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <RCC_GetClocksFreq+0x150>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c66:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000c6e:	4a2a      	ldr	r2, [pc, #168]	; (8000d18 <RCC_GetClocksFreq+0x15c>)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	4413      	add	r3, r2
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	40da      	lsrs	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <RCC_GetClocksFreq+0x150>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c8e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000c96:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <RCC_GetClocksFreq+0x15c>)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	40da      	lsrs	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <RCC_GetClocksFreq+0x150>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000cb6:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	0adb      	lsrs	r3, r3, #11
 8000cbc:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000cbe:	4a16      	ldr	r2, [pc, #88]	; (8000d18 <RCC_GetClocksFreq+0x15c>)
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	40da      	lsrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <RCC_GetClocksFreq+0x150>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cde:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	0b9b      	lsrs	r3, r3, #14
 8000ce4:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000ce6:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <RCC_GetClocksFreq+0x160>)
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	4413      	add	r3, r2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	611a      	str	r2, [r3, #16]
}
 8000d00:	371c      	adds	r7, #28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	007a1200 	.word	0x007a1200
 8000d14:	003d0900 	.word	0x003d0900
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000010 	.word	0x20000010

08000d20 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d006      	beq.n	8000d40 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <RCC_AHBPeriphClockCmd+0x38>)
 8000d34:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <RCC_AHBPeriphClockCmd+0x38>)
 8000d36:	6951      	ldr	r1, [r2, #20]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	615a      	str	r2, [r3, #20]
 8000d3e:	e006      	b.n	8000d4e <RCC_AHBPeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <RCC_AHBPeriphClockCmd+0x38>)
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <RCC_AHBPeriphClockCmd+0x38>)
 8000d44:	6951      	ldr	r1, [r2, #20]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	43d2      	mvns	r2, r2
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	615a      	str	r2, [r3, #20]
  }
}
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000

08000d5c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d006      	beq.n	8000d7c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <RCC_APB2PeriphClockCmd+0x38>)
 8000d70:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <RCC_APB2PeriphClockCmd+0x38>)
 8000d72:	6991      	ldr	r1, [r2, #24]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	430a      	orrs	r2, r1
 8000d78:	619a      	str	r2, [r3, #24]
 8000d7a:	e006      	b.n	8000d8a <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <RCC_APB2PeriphClockCmd+0x38>)
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <RCC_APB2PeriphClockCmd+0x38>)
 8000d80:	6991      	ldr	r1, [r2, #24]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	43d2      	mvns	r2, r2
 8000d86:	400a      	ands	r2, r1
 8000d88:	619a      	str	r2, [r3, #24]
  }
}
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40021000 	.word	0x40021000

08000d98 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d006      	beq.n	8000db8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <RCC_APB1PeriphClockCmd+0x38>)
 8000dac:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <RCC_APB1PeriphClockCmd+0x38>)
 8000dae:	69d1      	ldr	r1, [r2, #28]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	430a      	orrs	r2, r1
 8000db4:	61da      	str	r2, [r3, #28]
 8000db6:	e006      	b.n	8000dc6 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <RCC_APB1PeriphClockCmd+0x38>)
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <RCC_APB1PeriphClockCmd+0x38>)
 8000dbc:	69d1      	ldr	r1, [r2, #28]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	43d2      	mvns	r2, r2
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	61da      	str	r2, [r3, #28]
  }
}
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <RCC_APB2PeriphResetCmd+0x38>)
 8000de8:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <RCC_APB2PeriphResetCmd+0x38>)
 8000dea:	68d1      	ldr	r1, [r2, #12]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	e006      	b.n	8000e02 <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <RCC_APB2PeriphResetCmd+0x38>)
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <RCC_APB2PeriphResetCmd+0x38>)
 8000df8:	68d1      	ldr	r1, [r2, #12]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	43d2      	mvns	r2, r2
 8000dfe:	400a      	ands	r2, r1
 8000e00:	60da      	str	r2, [r3, #12]
  }
}
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40021000 	.word	0x40021000

08000e10 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d006      	beq.n	8000e30 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <RCC_APB1PeriphResetCmd+0x38>)
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <RCC_APB1PeriphResetCmd+0x38>)
 8000e26:	6911      	ldr	r1, [r2, #16]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	611a      	str	r2, [r3, #16]
 8000e2e:	e006      	b.n	8000e3e <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <RCC_APB1PeriphResetCmd+0x38>)
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <RCC_APB1PeriphResetCmd+0x38>)
 8000e34:	6911      	ldr	r1, [r2, #16]
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	43d2      	mvns	r2, r2
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	611a      	str	r2, [r3, #16]
  }
}
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000

08000e4c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <RCC_BackupResetCmd+0x1c>)
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	42420440 	.word	0x42420440

08000e6c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <RCC_ClockSecuritySystemCmd+0x1c>)
 8000e78:	79fa      	ldrb	r2, [r7, #7]
 8000e7a:	601a      	str	r2, [r3, #0]
}
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	4242004c 	.word	0x4242004c

08000e8c <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <RCC_MCOConfig+0x1c>)
 8000e98:	79fa      	ldrb	r2, [r7, #7]
 8000e9a:	701a      	strb	r2, [r3, #0]
}
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40021007 	.word	0x40021007

08000eac <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	095b      	lsrs	r3, r3, #5
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d103      	bne.n	8000ed8 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <RCC_GetFlagStatus+0x70>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e009      	b.n	8000eec <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d103      	bne.n	8000ee6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <RCC_GetFlagStatus+0x70>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e002      	b.n	8000eec <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <RCC_GetFlagStatus+0x70>)
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000f04:	2301      	movs	r3, #1
 8000f06:	74fb      	strb	r3, [r7, #19]
 8000f08:	e001      	b.n	8000f0e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8000f0e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	40021000 	.word	0x40021000

08000f20 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <RCC_ClearFlag+0x18>)
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <RCC_ClearFlag+0x18>)
 8000f28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f2a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000

08000f3c <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <RCC_GetITStatus+0x34>)
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e001      	b.n	8000f60 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <RCC_ClearITPendingBit+0x1c>)
 8000f80:	79fa      	ldrb	r2, [r7, #7]
 8000f82:	701a      	strb	r2, [r3, #0]
}
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	4002100a 	.word	0x4002100a

08000f94 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	4b78      	ldr	r3, [pc, #480]	; (8001180 <TIM_DeInit+0x1ec>)
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d10a      	bne.n	8000fba <TIM_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000fa4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000fa8:	2101      	movs	r1, #1
 8000faa:	f7ff ff13 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8000fae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	f7ff ff0e 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 8000fb8:	e0de      	b.n	8001178 <TIM_DeInit+0x1e4>
  }     
  else if (TIMx == TIM2)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc0:	d108      	bne.n	8000fd4 <TIM_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	f7ff ff23 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	2100      	movs	r1, #0
 8000fce:	f7ff ff1f 	bl	8000e10 <RCC_APB1PeriphResetCmd>
 8000fd2:	e0d1      	b.n	8001178 <TIM_DeInit+0x1e4>
  }
  else if (TIMx == TIM3)
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	4b6b      	ldr	r3, [pc, #428]	; (8001184 <TIM_DeInit+0x1f0>)
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d108      	bne.n	8000fee <TIM_DeInit+0x5a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000fdc:	2002      	movs	r0, #2
 8000fde:	2101      	movs	r1, #1
 8000fe0:	f7ff ff16 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	f7ff ff12 	bl	8000e10 <RCC_APB1PeriphResetCmd>
 8000fec:	e0c4      	b.n	8001178 <TIM_DeInit+0x1e4>
  }
  else if (TIMx == TIM4)
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4b65      	ldr	r3, [pc, #404]	; (8001188 <TIM_DeInit+0x1f4>)
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d108      	bne.n	8001008 <TIM_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000ff6:	2004      	movs	r0, #4
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	f7ff ff09 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8000ffe:	2004      	movs	r0, #4
 8001000:	2100      	movs	r1, #0
 8001002:	f7ff ff05 	bl	8000e10 <RCC_APB1PeriphResetCmd>
 8001006:	e0b7      	b.n	8001178 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM5)
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4b60      	ldr	r3, [pc, #384]	; (800118c <TIM_DeInit+0x1f8>)
 800100c:	429a      	cmp	r2, r3
 800100e:	d108      	bne.n	8001022 <TIM_DeInit+0x8e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001010:	2008      	movs	r0, #8
 8001012:	2101      	movs	r1, #1
 8001014:	f7ff fefc 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001018:	2008      	movs	r0, #8
 800101a:	2100      	movs	r1, #0
 800101c:	f7ff fef8 	bl	8000e10 <RCC_APB1PeriphResetCmd>
 8001020:	e0aa      	b.n	8001178 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM6)
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4b5a      	ldr	r3, [pc, #360]	; (8001190 <TIM_DeInit+0x1fc>)
 8001026:	429a      	cmp	r2, r3
 8001028:	d108      	bne.n	800103c <TIM_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800102a:	2010      	movs	r0, #16
 800102c:	2101      	movs	r1, #1
 800102e:	f7ff feef 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001032:	2010      	movs	r0, #16
 8001034:	2100      	movs	r1, #0
 8001036:	f7ff feeb 	bl	8000e10 <RCC_APB1PeriphResetCmd>
 800103a:	e09d      	b.n	8001178 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM7)
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4b55      	ldr	r3, [pc, #340]	; (8001194 <TIM_DeInit+0x200>)
 8001040:	429a      	cmp	r2, r3
 8001042:	d108      	bne.n	8001056 <TIM_DeInit+0xc2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001044:	2020      	movs	r0, #32
 8001046:	2101      	movs	r1, #1
 8001048:	f7ff fee2 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800104c:	2020      	movs	r0, #32
 800104e:	2100      	movs	r1, #0
 8001050:	f7ff fede 	bl	8000e10 <RCC_APB1PeriphResetCmd>
 8001054:	e090      	b.n	8001178 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM8)
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4b4f      	ldr	r3, [pc, #316]	; (8001198 <TIM_DeInit+0x204>)
 800105a:	429a      	cmp	r2, r3
 800105c:	d10a      	bne.n	8001074 <TIM_DeInit+0xe0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800105e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001062:	2101      	movs	r1, #1
 8001064:	f7ff feb6 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8001068:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800106c:	2100      	movs	r1, #0
 800106e:	f7ff feb1 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 8001072:	e081      	b.n	8001178 <TIM_DeInit+0x1e4>
  }
  else if (TIMx == TIM9)
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4b49      	ldr	r3, [pc, #292]	; (800119c <TIM_DeInit+0x208>)
 8001078:	429a      	cmp	r2, r3
 800107a:	d10a      	bne.n	8001092 <TIM_DeInit+0xfe>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800107c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001080:	2101      	movs	r1, #1
 8001082:	f7ff fea7 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001086:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800108a:	2100      	movs	r1, #0
 800108c:	f7ff fea2 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 8001090:	e072      	b.n	8001178 <TIM_DeInit+0x1e4>
   }  
  else if (TIMx == TIM10)
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <TIM_DeInit+0x20c>)
 8001096:	429a      	cmp	r2, r3
 8001098:	d10a      	bne.n	80010b0 <TIM_DeInit+0x11c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800109a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800109e:	2101      	movs	r1, #1
 80010a0:	f7ff fe98 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80010a4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010a8:	2100      	movs	r1, #0
 80010aa:	f7ff fe93 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 80010ae:	e063      	b.n	8001178 <TIM_DeInit+0x1e4>
  }  
  else if (TIMx == TIM11) 
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4b3c      	ldr	r3, [pc, #240]	; (80011a4 <TIM_DeInit+0x210>)
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d10a      	bne.n	80010ce <TIM_DeInit+0x13a>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80010b8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80010bc:	2101      	movs	r1, #1
 80010be:	f7ff fe89 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80010c2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80010c6:	2100      	movs	r1, #0
 80010c8:	f7ff fe84 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 80010cc:	e054      	b.n	8001178 <TIM_DeInit+0x1e4>
  }  
  else if (TIMx == TIM12)
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <TIM_DeInit+0x214>)
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d108      	bne.n	80010e8 <TIM_DeInit+0x154>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80010d6:	2040      	movs	r0, #64	; 0x40
 80010d8:	2101      	movs	r1, #1
 80010da:	f7ff fe99 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80010de:	2040      	movs	r0, #64	; 0x40
 80010e0:	2100      	movs	r1, #0
 80010e2:	f7ff fe95 	bl	8000e10 <RCC_APB1PeriphResetCmd>
 80010e6:	e047      	b.n	8001178 <TIM_DeInit+0x1e4>
  }  
  else if (TIMx == TIM13) 
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <TIM_DeInit+0x218>)
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d108      	bne.n	8001102 <TIM_DeInit+0x16e>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80010f0:	2080      	movs	r0, #128	; 0x80
 80010f2:	2101      	movs	r1, #1
 80010f4:	f7ff fe8c 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80010f8:	2080      	movs	r0, #128	; 0x80
 80010fa:	2100      	movs	r1, #0
 80010fc:	f7ff fe88 	bl	8000e10 <RCC_APB1PeriphResetCmd>
 8001100:	e03a      	b.n	8001178 <TIM_DeInit+0x1e4>
  }
  else if (TIMx == TIM14) 
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <TIM_DeInit+0x21c>)
 8001106:	429a      	cmp	r2, r3
 8001108:	d10a      	bne.n	8001120 <TIM_DeInit+0x18c>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800110a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800110e:	2101      	movs	r1, #1
 8001110:	f7ff fe7e 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8001114:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001118:	2100      	movs	r1, #0
 800111a:	f7ff fe79 	bl	8000e10 <RCC_APB1PeriphResetCmd>
 800111e:	e02b      	b.n	8001178 <TIM_DeInit+0x1e4>
  }        
  else if (TIMx == TIM15)
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <TIM_DeInit+0x220>)
 8001124:	429a      	cmp	r2, r3
 8001126:	d10a      	bne.n	800113e <TIM_DeInit+0x1aa>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8001128:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800112c:	2101      	movs	r1, #1
 800112e:	f7ff fe51 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 8001132:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001136:	2100      	movs	r1, #0
 8001138:	f7ff fe4c 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 800113c:	e01c      	b.n	8001178 <TIM_DeInit+0x1e4>
  } 
  else if (TIMx == TIM16)
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <TIM_DeInit+0x224>)
 8001142:	429a      	cmp	r2, r3
 8001144:	d10a      	bne.n	800115c <TIM_DeInit+0x1c8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8001146:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800114a:	2101      	movs	r1, #1
 800114c:	f7ff fe42 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 8001150:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001154:	2100      	movs	r1, #0
 8001156:	f7ff fe3d 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
 800115a:	e00d      	b.n	8001178 <TIM_DeInit+0x1e4>
  } 
  else
  {
    if (TIMx == TIM17)
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <TIM_DeInit+0x228>)
 8001160:	429a      	cmp	r2, r3
 8001162:	d109      	bne.n	8001178 <TIM_DeInit+0x1e4>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8001164:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001168:	2101      	movs	r1, #1
 800116a:	f7ff fe33 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 800116e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001172:	2100      	movs	r1, #0
 8001174:	f7ff fe2e 	bl	8000dd4 <RCC_APB2PeriphResetCmd>
    }  
  }
}
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40012c00 	.word	0x40012c00
 8001184:	40000400 	.word	0x40000400
 8001188:	40000800 	.word	0x40000800
 800118c:	40000c00 	.word	0x40000c00
 8001190:	40001000 	.word	0x40001000
 8001194:	40001400 	.word	0x40001400
 8001198:	40013400 	.word	0x40013400
 800119c:	40014c00 	.word	0x40014c00
 80011a0:	40015000 	.word	0x40015000
 80011a4:	40015400 	.word	0x40015400
 80011a8:	40001800 	.word	0x40001800
 80011ac:	40001c00 	.word	0x40001c00
 80011b0:	40002000 	.word	0x40002000
 80011b4:	40014000 	.word	0x40014000
 80011b8:	40014400 	.word	0x40014400
 80011bc:	40014800 	.word	0x40014800

080011c0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <TIM_TimeBaseInit+0xd0>)
 80011d8:	429a      	cmp	r2, r3
 80011da:	d013      	beq.n	8001204 <TIM_TimeBaseInit+0x44>
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <TIM_TimeBaseInit+0xd4>)
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d00f      	beq.n	8001204 <TIM_TimeBaseInit+0x44>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ea:	d00b      	beq.n	8001204 <TIM_TimeBaseInit+0x44>
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <TIM_TimeBaseInit+0xd8>)
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d007      	beq.n	8001204 <TIM_TimeBaseInit+0x44>
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4b29      	ldr	r3, [pc, #164]	; (800129c <TIM_TimeBaseInit+0xdc>)
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d003      	beq.n	8001204 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <TIM_TimeBaseInit+0xe0>)
 8001200:	429a      	cmp	r2, r3
 8001202:	d108      	bne.n	8001216 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800120a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	885a      	ldrh	r2, [r3, #2]
 8001210:	89fb      	ldrh	r3, [r7, #14]
 8001212:	4313      	orrs	r3, r2
 8001214:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <TIM_TimeBaseInit+0xe4>)
 800121a:	429a      	cmp	r2, r3
 800121c:	d00c      	beq.n	8001238 <TIM_TimeBaseInit+0x78>
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <TIM_TimeBaseInit+0xe8>)
 8001222:	429a      	cmp	r2, r3
 8001224:	d008      	beq.n	8001238 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800122c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	88da      	ldrh	r2, [r3, #6]
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	4313      	orrs	r3, r2
 8001236:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	89fa      	ldrh	r2, [r7, #14]
 800123c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	889a      	ldrh	r2, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	881a      	ldrh	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <TIM_TimeBaseInit+0xd0>)
 8001252:	429a      	cmp	r2, r3
 8001254:	d00f      	beq.n	8001276 <TIM_TimeBaseInit+0xb6>
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <TIM_TimeBaseInit+0xd4>)
 800125a:	429a      	cmp	r2, r3
 800125c:	d00b      	beq.n	8001276 <TIM_TimeBaseInit+0xb6>
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <TIM_TimeBaseInit+0xec>)
 8001262:	429a      	cmp	r2, r3
 8001264:	d007      	beq.n	8001276 <TIM_TimeBaseInit+0xb6>
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <TIM_TimeBaseInit+0xf0>)
 800126a:	429a      	cmp	r2, r3
 800126c:	d003      	beq.n	8001276 <TIM_TimeBaseInit+0xb6>
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <TIM_TimeBaseInit+0xf4>)
 8001272:	429a      	cmp	r2, r3
 8001274:	d104      	bne.n	8001280 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	7a1b      	ldrb	r3, [r3, #8]
 800127a:	461a      	mov	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	829a      	strh	r2, [r3, #20]
}
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40012c00 	.word	0x40012c00
 8001294:	40013400 	.word	0x40013400
 8001298:	40000400 	.word	0x40000400
 800129c:	40000800 	.word	0x40000800
 80012a0:	40000c00 	.word	0x40000c00
 80012a4:	40001000 	.word	0x40001000
 80012a8:	40001400 	.word	0x40001400
 80012ac:	40014000 	.word	0x40014000
 80012b0:	40014400 	.word	0x40014400
 80012b4:	40014800 	.word	0x40014800

080012b8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	817b      	strh	r3, [r7, #10]
 80012c6:	2300      	movs	r3, #0
 80012c8:	81fb      	strh	r3, [r7, #14]
 80012ca:	2300      	movs	r3, #0
 80012cc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	8c1b      	ldrh	r3, [r3, #32]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	b29a      	uxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	8c1b      	ldrh	r3, [r3, #32]
 80012e2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	889b      	ldrh	r3, [r3, #4]
 80012e8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	8b1b      	ldrh	r3, [r3, #24]
 80012ee:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 80012f0:	897b      	ldrh	r3, [r7, #10]
 80012f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012f6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80012f8:	897b      	ldrh	r3, [r7, #10]
 80012fa:	f023 0303 	bic.w	r3, r3, #3
 80012fe:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	881a      	ldrh	r2, [r3, #0]
 8001304:	897b      	ldrh	r3, [r7, #10]
 8001306:	4313      	orrs	r3, r2
 8001308:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	f023 0302 	bic.w	r3, r3, #2
 8001310:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	891a      	ldrh	r2, [r3, #8]
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	4313      	orrs	r3, r2
 800131a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	885a      	ldrh	r2, [r3, #2]
 8001320:	89fb      	ldrh	r3, [r7, #14]
 8001322:	4313      	orrs	r3, r2
 8001324:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <TIM_OC1Init+0x104>)
 800132a:	429a      	cmp	r2, r3
 800132c:	d00f      	beq.n	800134e <TIM_OC1Init+0x96>
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <TIM_OC1Init+0x108>)
 8001332:	429a      	cmp	r2, r3
 8001334:	d00b      	beq.n	800134e <TIM_OC1Init+0x96>
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <TIM_OC1Init+0x10c>)
 800133a:	429a      	cmp	r2, r3
 800133c:	d007      	beq.n	800134e <TIM_OC1Init+0x96>
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <TIM_OC1Init+0x110>)
 8001342:	429a      	cmp	r2, r3
 8001344:	d003      	beq.n	800134e <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <TIM_OC1Init+0x114>)
 800134a:	429a      	cmp	r2, r3
 800134c:	d123      	bne.n	8001396 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	f023 0308 	bic.w	r3, r3, #8
 8001354:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	895a      	ldrh	r2, [r3, #10]
 800135a:	89fb      	ldrh	r3, [r7, #14]
 800135c:	4313      	orrs	r3, r2
 800135e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001360:	89fb      	ldrh	r3, [r7, #14]
 8001362:	f023 0304 	bic.w	r3, r3, #4
 8001366:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	889a      	ldrh	r2, [r3, #4]
 800136c:	89fb      	ldrh	r3, [r7, #14]
 800136e:	4313      	orrs	r3, r2
 8001370:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8001372:	89bb      	ldrh	r3, [r7, #12]
 8001374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001378:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800137a:	89bb      	ldrh	r3, [r7, #12]
 800137c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001380:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	899a      	ldrh	r2, [r3, #12]
 8001386:	89bb      	ldrh	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	89da      	ldrh	r2, [r3, #14]
 8001390:	89bb      	ldrh	r3, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	89ba      	ldrh	r2, [r7, #12]
 800139a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	897a      	ldrh	r2, [r7, #10]
 80013a0:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	88da      	ldrh	r2, [r3, #6]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	89fa      	ldrh	r2, [r7, #14]
 80013ae:	841a      	strh	r2, [r3, #32]
}
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40012c00 	.word	0x40012c00
 80013c0:	40013400 	.word	0x40013400
 80013c4:	40014000 	.word	0x40014000
 80013c8:	40014400 	.word	0x40014400
 80013cc:	40014800 	.word	0x40014800

080013d0 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	817b      	strh	r3, [r7, #10]
 80013de:	2300      	movs	r3, #0
 80013e0:	81fb      	strh	r3, [r7, #14]
 80013e2:	2300      	movs	r3, #0
 80013e4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	8c1b      	ldrh	r3, [r3, #32]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f023 0310 	bic.w	r3, r3, #16
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	8c1b      	ldrh	r3, [r3, #32]
 80013fa:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	889b      	ldrh	r3, [r3, #4]
 8001400:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	8b1b      	ldrh	r3, [r3, #24]
 8001406:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 8001408:	897b      	ldrh	r3, [r7, #10]
 800140a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800140e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8001410:	897b      	ldrh	r3, [r7, #10]
 8001412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001416:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b29a      	uxth	r2, r3
 8001420:	897b      	ldrh	r3, [r7, #10]
 8001422:	4313      	orrs	r3, r2
 8001424:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	f023 0320 	bic.w	r3, r3, #32
 800142c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	891b      	ldrh	r3, [r3, #8]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	b29a      	uxth	r2, r3
 8001436:	89fb      	ldrh	r3, [r7, #14]
 8001438:	4313      	orrs	r3, r2
 800143a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	885b      	ldrh	r3, [r3, #2]
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	b29a      	uxth	r2, r3
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	4313      	orrs	r3, r2
 8001448:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <TIM_OC2Init+0x108>)
 800144e:	429a      	cmp	r2, r3
 8001450:	d003      	beq.n	800145a <TIM_OC2Init+0x8a>
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <TIM_OC2Init+0x10c>)
 8001456:	429a      	cmp	r2, r3
 8001458:	d12b      	bne.n	80014b2 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 800145a:	89fb      	ldrh	r3, [r7, #14]
 800145c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001460:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	895b      	ldrh	r3, [r3, #10]
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	b29a      	uxth	r2, r3
 800146a:	89fb      	ldrh	r3, [r7, #14]
 800146c:	4313      	orrs	r3, r2
 800146e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8001470:	89fb      	ldrh	r3, [r7, #14]
 8001472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001476:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	889b      	ldrh	r3, [r3, #4]
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	b29a      	uxth	r2, r3
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	4313      	orrs	r3, r2
 8001484:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8001486:	89bb      	ldrh	r3, [r7, #12]
 8001488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800148c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 800148e:	89bb      	ldrh	r3, [r7, #12]
 8001490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001494:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	899b      	ldrh	r3, [r3, #12]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	b29a      	uxth	r2, r3
 800149e:	89bb      	ldrh	r3, [r7, #12]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	89db      	ldrh	r3, [r3, #14]
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	89bb      	ldrh	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	89ba      	ldrh	r2, [r7, #12]
 80014b6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	897a      	ldrh	r2, [r7, #10]
 80014bc:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	88da      	ldrh	r2, [r3, #6]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	89fa      	ldrh	r2, [r7, #14]
 80014ca:	841a      	strh	r2, [r3, #32]
}
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40012c00 	.word	0x40012c00
 80014dc:	40013400 	.word	0x40013400

080014e0 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	817b      	strh	r3, [r7, #10]
 80014ee:	2300      	movs	r3, #0
 80014f0:	81fb      	strh	r3, [r7, #14]
 80014f2:	2300      	movs	r3, #0
 80014f4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	8c1b      	ldrh	r3, [r3, #32]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001500:	b29a      	uxth	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	8c1b      	ldrh	r3, [r3, #32]
 800150a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	889b      	ldrh	r3, [r3, #4]
 8001510:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	8b9b      	ldrh	r3, [r3, #28]
 8001516:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8001518:	897b      	ldrh	r3, [r7, #10]
 800151a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800151e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8001520:	897b      	ldrh	r3, [r7, #10]
 8001522:	f023 0303 	bic.w	r3, r3, #3
 8001526:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	881a      	ldrh	r2, [r3, #0]
 800152c:	897b      	ldrh	r3, [r7, #10]
 800152e:	4313      	orrs	r3, r2
 8001530:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001538:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	891b      	ldrh	r3, [r3, #8]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b29a      	uxth	r2, r3
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	4313      	orrs	r3, r2
 8001546:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	885b      	ldrh	r3, [r3, #2]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b29a      	uxth	r2, r3
 8001550:	89fb      	ldrh	r3, [r7, #14]
 8001552:	4313      	orrs	r3, r2
 8001554:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <TIM_OC3Init+0x104>)
 800155a:	429a      	cmp	r2, r3
 800155c:	d003      	beq.n	8001566 <TIM_OC3Init+0x86>
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <TIM_OC3Init+0x108>)
 8001562:	429a      	cmp	r2, r3
 8001564:	d12b      	bne.n	80015be <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800156c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	895b      	ldrh	r3, [r3, #10]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b29a      	uxth	r2, r3
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	4313      	orrs	r3, r2
 800157a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 800157c:	89fb      	ldrh	r3, [r7, #14]
 800157e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001582:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	889b      	ldrh	r3, [r3, #4]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b29a      	uxth	r2, r3
 800158c:	89fb      	ldrh	r3, [r7, #14]
 800158e:	4313      	orrs	r3, r2
 8001590:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8001592:	89bb      	ldrh	r3, [r7, #12]
 8001594:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001598:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 800159a:	89bb      	ldrh	r3, [r7, #12]
 800159c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015a0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	899b      	ldrh	r3, [r3, #12]
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	89bb      	ldrh	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	89db      	ldrh	r3, [r3, #14]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	89bb      	ldrh	r3, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	89ba      	ldrh	r2, [r7, #12]
 80015c2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	897a      	ldrh	r2, [r7, #10]
 80015c8:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	88da      	ldrh	r2, [r3, #6]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	89fa      	ldrh	r2, [r7, #14]
 80015d6:	841a      	strh	r2, [r3, #32]
}
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40012c00 	.word	0x40012c00
 80015e8:	40013400 	.word	0x40013400

080015ec <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	81bb      	strh	r3, [r7, #12]
 80015fa:	2300      	movs	r3, #0
 80015fc:	817b      	strh	r3, [r7, #10]
 80015fe:	2300      	movs	r3, #0
 8001600:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8c1b      	ldrh	r3, [r3, #32]
 8001606:	b29b      	uxth	r3, r3
 8001608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800160c:	b29a      	uxth	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	8c1b      	ldrh	r3, [r3, #32]
 8001616:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	889b      	ldrh	r3, [r3, #4]
 800161c:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	8b9b      	ldrh	r3, [r3, #28]
 8001622:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8001624:	89bb      	ldrh	r3, [r7, #12]
 8001626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800162a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 800162c:	89bb      	ldrh	r3, [r7, #12]
 800162e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001632:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b29a      	uxth	r2, r3
 800163c:	89bb      	ldrh	r3, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8001642:	897b      	ldrh	r3, [r7, #10]
 8001644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001648:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	891b      	ldrh	r3, [r3, #8]
 800164e:	031b      	lsls	r3, r3, #12
 8001650:	b29a      	uxth	r2, r3
 8001652:	897b      	ldrh	r3, [r7, #10]
 8001654:	4313      	orrs	r3, r2
 8001656:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	885b      	ldrh	r3, [r3, #2]
 800165c:	031b      	lsls	r3, r3, #12
 800165e:	b29a      	uxth	r2, r3
 8001660:	897b      	ldrh	r3, [r7, #10]
 8001662:	4313      	orrs	r3, r2
 8001664:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <TIM_OC4Init+0xc8>)
 800166a:	429a      	cmp	r2, r3
 800166c:	d003      	beq.n	8001676 <TIM_OC4Init+0x8a>
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <TIM_OC4Init+0xcc>)
 8001672:	429a      	cmp	r2, r3
 8001674:	d10a      	bne.n	800168c <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800167c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	899b      	ldrh	r3, [r3, #12]
 8001682:	019b      	lsls	r3, r3, #6
 8001684:	b29a      	uxth	r2, r3
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	4313      	orrs	r3, r2
 800168a:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	89fa      	ldrh	r2, [r7, #14]
 8001690:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	89ba      	ldrh	r2, [r7, #12]
 8001696:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	88da      	ldrh	r2, [r3, #6]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	897a      	ldrh	r2, [r7, #10]
 80016a6:	841a      	strh	r2, [r3, #32]
}
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40012c00 	.word	0x40012c00
 80016b8:	40013400 	.word	0x40013400

080016bc <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10f      	bne.n	80016ee <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	8859      	ldrh	r1, [r3, #2]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	889a      	ldrh	r2, [r3, #4]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	891b      	ldrh	r3, [r3, #8]
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f001 f966 	bl	80029ac <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	88db      	ldrh	r3, [r3, #6]
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4619      	mov	r1, r3
 80016e8:	f001 f816 	bl	8002718 <TIM_SetIC1Prescaler>
 80016ec:	e036      	b.n	800175c <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d10f      	bne.n	8001716 <TIM_ICInit+0x5a>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	8859      	ldrh	r1, [r3, #2]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	889a      	ldrh	r2, [r3, #4]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	891b      	ldrh	r3, [r3, #8]
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f001 f9bc 	bl	8002a80 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	88db      	ldrh	r3, [r3, #6]
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4619      	mov	r1, r3
 8001710:	f001 f81e 	bl	8002750 <TIM_SetIC2Prescaler>
 8001714:	e022      	b.n	800175c <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	2b08      	cmp	r3, #8
 800171c:	d10f      	bne.n	800173e <TIM_ICInit+0x82>
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	8859      	ldrh	r1, [r3, #2]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	889a      	ldrh	r2, [r3, #4]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	891b      	ldrh	r3, [r3, #8]
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f001 fa1c 	bl	8002b68 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	88db      	ldrh	r3, [r3, #6]
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4619      	mov	r1, r3
 8001738:	f001 f828 	bl	800278c <TIM_SetIC3Prescaler>
 800173c:	e00e      	b.n	800175c <TIM_ICInit+0xa0>
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	8859      	ldrh	r1, [r3, #2]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	889a      	ldrh	r2, [r3, #4]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	891b      	ldrh	r3, [r3, #8]
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f001 fa7c 	bl	8002c48 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	88db      	ldrh	r3, [r3, #6]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	4619      	mov	r1, r3
 8001758:	f001 f834 	bl	80027c4 <TIM_SetIC4Prescaler>
  }
}
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop

08001764 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800176e:	2300      	movs	r3, #0
 8001770:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8001772:	2301      	movs	r3, #1
 8001774:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	885b      	ldrh	r3, [r3, #2]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800177e:	2302      	movs	r3, #2
 8001780:	81fb      	strh	r3, [r7, #14]
 8001782:	e001      	b.n	8001788 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8001784:	2300      	movs	r3, #0
 8001786:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	889b      	ldrh	r3, [r3, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d102      	bne.n	8001796 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8001790:	2302      	movs	r3, #2
 8001792:	81bb      	strh	r3, [r7, #12]
 8001794:	e001      	b.n	800179a <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8001796:	2301      	movs	r3, #1
 8001798:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d11c      	bne.n	80017dc <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	8859      	ldrh	r1, [r3, #2]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	889a      	ldrh	r2, [r3, #4]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	891b      	ldrh	r3, [r3, #8]
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f001 f8fc 	bl	80029ac <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	88db      	ldrh	r3, [r3, #6]
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	4619      	mov	r1, r3
 80017bc:	f000 ffac 	bl	8002718 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	891b      	ldrh	r3, [r3, #8]
 80017c4:	89f9      	ldrh	r1, [r7, #14]
 80017c6:	89ba      	ldrh	r2, [r7, #12]
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f001 f959 	bl	8002a80 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	88db      	ldrh	r3, [r3, #6]
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f000 ffbb 	bl	8002750 <TIM_SetIC2Prescaler>
 80017da:	e01b      	b.n	8001814 <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	8859      	ldrh	r1, [r3, #2]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	889a      	ldrh	r2, [r3, #4]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	891b      	ldrh	r3, [r3, #8]
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f001 f949 	bl	8002a80 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	88db      	ldrh	r3, [r3, #6]
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f000 ffab 	bl	8002750 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	891b      	ldrh	r3, [r3, #8]
 80017fe:	89f9      	ldrh	r1, [r7, #14]
 8001800:	89ba      	ldrh	r2, [r7, #12]
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f001 f8d2 	bl	80029ac <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	88db      	ldrh	r3, [r3, #6]
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4619      	mov	r1, r3
 8001810:	f000 ff82 	bl	8002718 <TIM_SetIC1Prescaler>
  }
}
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop

0800181c <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	881a      	ldrh	r2, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	885b      	ldrh	r3, [r3, #2]
 800182e:	4313      	orrs	r3, r2
 8001830:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001836:	4313      	orrs	r3, r2
 8001838:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800183e:	4313      	orrs	r3, r2
 8001840:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001846:	4313      	orrs	r3, r2
 8001848:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800184e:	4313      	orrs	r3, r2
 8001850:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001856:	4313      	orrs	r3, r2
 8001858:	b29a      	uxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187a:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	721a      	strb	r2, [r3, #8]
}
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	81da      	strh	r2, [r3, #14]
}
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop

080018e4 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	811a      	strh	r2, [r3, #8]
}
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	819a      	strh	r2, [r3, #12]
}
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	801a      	strh	r2, [r3, #0]
 8001972:	e007      	b.n	8001984 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	b29b      	uxth	r3, r3
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	801a      	strh	r2, [r3, #0]
  }
}
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop

08001990 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00c      	beq.n	80019bc <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80019ba:	e009      	b.n	80019d0 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop

080019dc <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	460a      	mov	r2, r1
 80019e8:	807a      	strh	r2, [r7, #2]
 80019ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80019ec:	787b      	ldrb	r3, [r7, #1]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	899b      	ldrh	r3, [r3, #12]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	819a      	strh	r2, [r3, #12]
 8001a02:	e009      	b.n	8001a18 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	899b      	ldrh	r3, [r3, #12]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4013      	ands	r3, r2
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	819a      	strh	r2, [r3, #12]
  }
}
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop

08001a24 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	829a      	strh	r2, [r3, #20]
}
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	460a      	mov	r2, r1
 8001a4c:	807a      	strh	r2, [r7, #2]
 8001a4e:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8001a50:	887a      	ldrh	r2, [r7, #2]
 8001a52:	883b      	ldrh	r3, [r7, #0]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	460a      	mov	r2, r1
 8001a74:	807a      	strh	r2, [r7, #2]
 8001a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	899b      	ldrh	r3, [r3, #12]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	819a      	strh	r2, [r3, #12]
 8001a8e:	e009      	b.n	8001aa4 <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	899b      	ldrh	r3, [r3, #12]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	819a      	strh	r2, [r3, #12]
  }
}
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop

08001ab0 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	891b      	ldrh	r3, [r3, #8]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f023 0307 	bic.w	r3, r3, #7
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	811a      	strh	r2, [r3, #8]
}
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop

08001ad4 <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f000 f8c9 	bl	8001c7c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	891b      	ldrh	r3, [r3, #8]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	f043 0307 	orr.w	r3, r3, #7
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	811a      	strh	r2, [r3, #8]
}
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	8179      	strh	r1, [r7, #10]
 8001b0a:	813a      	strh	r2, [r7, #8]
 8001b0c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8001b0e:	897b      	ldrh	r3, [r7, #10]
 8001b10:	2b60      	cmp	r3, #96	; 0x60
 8001b12:	d107      	bne.n	8001b24 <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8001b14:	893a      	ldrh	r2, [r7, #8]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f000 ffaf 	bl	8002a80 <TI2_Config>
 8001b22:	e006      	b.n	8001b32 <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8001b24:	893a      	ldrh	r2, [r7, #8]
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f000 ff3d 	bl	80029ac <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8001b32:	897b      	ldrh	r3, [r7, #10]
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	4619      	mov	r1, r3
 8001b38:	f000 f8a0 	bl	8001c7c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	891b      	ldrh	r3, [r3, #8]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	f043 0307 	orr.w	r3, r3, #7
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	811a      	strh	r2, [r3, #8]
}
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop

08001b54 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	8179      	strh	r1, [r7, #10]
 8001b5e:	813a      	strh	r2, [r7, #8]
 8001b60:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8001b66:	8979      	ldrh	r1, [r7, #10]
 8001b68:	893a      	ldrh	r2, [r7, #8]
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f831 	bl	8001bd4 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	891b      	ldrh	r3, [r3, #8]
 8001b76:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001b78:	8afb      	ldrh	r3, [r7, #22]
 8001b7a:	f023 0307 	bic.w	r3, r3, #7
 8001b7e:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8001b80:	8afb      	ldrh	r3, [r7, #22]
 8001b82:	f043 0307 	orr.w	r3, r3, #7
 8001b86:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001b88:	8afb      	ldrh	r3, [r7, #22]
 8001b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8e:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 8001b90:	8afb      	ldrh	r3, [r7, #22]
 8001b92:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001b96:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8afa      	ldrh	r2, [r7, #22]
 8001b9c:	811a      	strh	r2, [r3, #8]
}
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	8179      	strh	r1, [r7, #10]
 8001bae:	813a      	strh	r2, [r7, #8]
 8001bb0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8001bb2:	8979      	ldrh	r1, [r7, #10]
 8001bb4:	893a      	ldrh	r2, [r7, #8]
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f80b 	bl	8001bd4 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	891b      	ldrh	r3, [r3, #8]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	811a      	strh	r2, [r3, #8]
}
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	8179      	strh	r1, [r7, #10]
 8001bde:	813a      	strh	r2, [r7, #8]
 8001be0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	891b      	ldrh	r3, [r3, #8]
 8001bea:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
 8001bec:	8afb      	ldrh	r3, [r7, #22]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	893b      	ldrh	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	897b      	ldrh	r3, [r7, #10]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	8afb      	ldrh	r3, [r7, #22]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8afa      	ldrh	r2, [r7, #22]
 8001c0e:	811a      	strh	r2, [r3, #8]
}
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	460a      	mov	r2, r1
 8001c28:	807a      	strh	r2, [r7, #2]
 8001c2a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	883a      	ldrh	r2, [r7, #0]
 8001c36:	829a      	strh	r2, [r3, #20]
}
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop

08001c44 <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001c5a:	89fb      	ldrh	r3, [r7, #14]
 8001c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c60:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8001c62:	89fa      	ldrh	r2, [r7, #14]
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	89fa      	ldrh	r2, [r7, #14]
 8001c6e:	801a      	strh	r2, [r3, #0]
}
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	891b      	ldrh	r3, [r3, #8]
 8001c90:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001c92:	89fb      	ldrh	r3, [r7, #14]
 8001c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c98:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8001c9a:	89fa      	ldrh	r2, [r7, #14]
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	89fa      	ldrh	r2, [r7, #14]
 8001ca6:	811a      	strh	r2, [r3, #8]
}
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop

08001cb4 <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	8179      	strh	r1, [r7, #10]
 8001cbe:	813a      	strh	r2, [r7, #8]
 8001cc0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	891b      	ldrh	r3, [r3, #8]
 8001cd2:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8b1b      	ldrh	r3, [r3, #24]
 8001cd8:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8c1b      	ldrh	r3, [r3, #32]
 8001cde:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001ce0:	8afb      	ldrh	r3, [r7, #22]
 8001ce2:	f023 0307 	bic.w	r3, r3, #7
 8001ce6:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8001ce8:	8afa      	ldrh	r2, [r7, #22]
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8001cf0:	8abb      	ldrh	r3, [r7, #20]
 8001cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf6:	f023 0303 	bic.w	r3, r3, #3
 8001cfa:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001cfc:	8abb      	ldrh	r3, [r7, #20]
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8001d08:	8a7b      	ldrh	r3, [r7, #18]
 8001d0a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001d0e:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	893b      	ldrh	r3, [r7, #8]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	8a7b      	ldrh	r3, [r7, #18]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8afa      	ldrh	r2, [r7, #22]
 8001d26:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8aba      	ldrh	r2, [r7, #20]
 8001d2c:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8a7a      	ldrh	r2, [r7, #18]
 8001d32:	841a      	strh	r2, [r3, #32]
}
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop

08001d40 <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	8b1b      	ldrh	r3, [r3, #24]
 8001d54:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5c:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8001d5e:	89fa      	ldrh	r2, [r7, #14]
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	89fa      	ldrh	r2, [r7, #14]
 8001d6a:	831a      	strh	r2, [r3, #24]
}
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop

08001d78 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	8b1b      	ldrh	r3, [r3, #24]
 8001d8c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8001d8e:	89fb      	ldrh	r3, [r7, #14]
 8001d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d94:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	89fb      	ldrh	r3, [r7, #14]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	89fa      	ldrh	r2, [r7, #14]
 8001da6:	831a      	strh	r2, [r3, #24]
}
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop

08001db4 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	8b9b      	ldrh	r3, [r3, #28]
 8001dc8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 8001dca:	89fb      	ldrh	r3, [r7, #14]
 8001dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd0:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8001dd2:	89fa      	ldrh	r2, [r7, #14]
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	89fa      	ldrh	r2, [r7, #14]
 8001dde:	839a      	strh	r2, [r3, #28]
}
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop

08001dec <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8b9b      	ldrh	r3, [r3, #28]
 8001e00:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8001e02:	89fb      	ldrh	r3, [r7, #14]
 8001e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e08:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	89fb      	ldrh	r3, [r7, #14]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	89fa      	ldrh	r2, [r7, #14]
 8001e1a:	839a      	strh	r2, [r3, #28]
}
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop

08001e28 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	e007      	b.n	8001e5c <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	801a      	strh	r2, [r3, #0]
  }
}
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop

08001e68 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	889b      	ldrh	r3, [r3, #4]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	809a      	strh	r2, [r3, #4]
 8001e8a:	e007      	b.n	8001e9c <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	889b      	ldrh	r3, [r3, #4]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	f023 0304 	bic.w	r3, r3, #4
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	809a      	strh	r2, [r3, #4]
  }
}
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop

08001ea8 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	889b      	ldrh	r3, [r3, #4]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	809a      	strh	r2, [r3, #4]
 8001eca:	e007      	b.n	8001edc <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	889b      	ldrh	r3, [r3, #4]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	f023 0308 	bic.w	r3, r3, #8
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	809a      	strh	r2, [r3, #4]
  }
}
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop

08001ee8 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d008      	beq.n	8001f0c <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	889b      	ldrh	r3, [r3, #4]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	809a      	strh	r2, [r3, #4]
 8001f0a:	e007      	b.n	8001f1c <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	889b      	ldrh	r3, [r3, #4]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	809a      	strh	r2, [r3, #4]
  }
}
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop

08001f28 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	8b1b      	ldrh	r3, [r3, #24]
 8001f3c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001f3e:	89fb      	ldrh	r3, [r7, #14]
 8001f40:	f023 0308 	bic.w	r3, r3, #8
 8001f44:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001f46:	89fa      	ldrh	r2, [r7, #14]
 8001f48:	887b      	ldrh	r3, [r7, #2]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	89fa      	ldrh	r2, [r7, #14]
 8001f52:	831a      	strh	r2, [r3, #24]
}
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop

08001f60 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	8b1b      	ldrh	r3, [r3, #24]
 8001f74:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8001f76:	89fb      	ldrh	r3, [r7, #14]
 8001f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f7c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	89fa      	ldrh	r2, [r7, #14]
 8001f8e:	831a      	strh	r2, [r3, #24]
}
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop

08001f9c <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	8b9b      	ldrh	r3, [r3, #28]
 8001fb0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8001fb2:	89fb      	ldrh	r3, [r7, #14]
 8001fb4:	f023 0308 	bic.w	r3, r3, #8
 8001fb8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8001fba:	89fa      	ldrh	r2, [r7, #14]
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	89fa      	ldrh	r2, [r7, #14]
 8001fc6:	839a      	strh	r2, [r3, #28]
}
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop

08001fd4 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	8b9b      	ldrh	r3, [r3, #28]
 8001fe8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8001fea:	89fb      	ldrh	r3, [r7, #14]
 8001fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ff0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001ff2:	887b      	ldrh	r3, [r7, #2]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	89fb      	ldrh	r3, [r7, #14]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	89fa      	ldrh	r2, [r7, #14]
 8002002:	839a      	strh	r2, [r3, #28]
}
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop

08002010 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	8b1b      	ldrh	r3, [r3, #24]
 8002024:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8002026:	89fb      	ldrh	r3, [r7, #14]
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800202e:	89fa      	ldrh	r2, [r7, #14]
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	4313      	orrs	r3, r2
 8002034:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	89fa      	ldrh	r2, [r7, #14]
 800203a:	831a      	strh	r2, [r3, #24]
}
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop

08002048 <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	8b1b      	ldrh	r3, [r3, #24]
 800205c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002064:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	b29a      	uxth	r2, r3
 800206c:	89fb      	ldrh	r3, [r7, #14]
 800206e:	4313      	orrs	r3, r2
 8002070:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	89fa      	ldrh	r2, [r7, #14]
 8002076:	831a      	strh	r2, [r3, #24]
}
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop

08002084 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	8b9b      	ldrh	r3, [r3, #28]
 8002098:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 800209a:	89fb      	ldrh	r3, [r7, #14]
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80020a2:	89fa      	ldrh	r2, [r7, #14]
 80020a4:	887b      	ldrh	r3, [r7, #2]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	89fa      	ldrh	r2, [r7, #14]
 80020ae:	839a      	strh	r2, [r3, #28]
}
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop

080020bc <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8b9b      	ldrh	r3, [r3, #28]
 80020d0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020d8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	b29a      	uxth	r2, r3
 80020e0:	89fb      	ldrh	r3, [r7, #14]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	89fa      	ldrh	r2, [r7, #14]
 80020ea:	839a      	strh	r2, [r3, #28]
}
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop

080020f8 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	8b1b      	ldrh	r3, [r3, #24]
 800210c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 800210e:	89fb      	ldrh	r3, [r7, #14]
 8002110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002114:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8002116:	89fa      	ldrh	r2, [r7, #14]
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	4313      	orrs	r3, r2
 800211c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	89fa      	ldrh	r2, [r7, #14]
 8002122:	831a      	strh	r2, [r3, #24]
}
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop

08002130 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	8b1b      	ldrh	r3, [r3, #24]
 8002144:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 8002146:	89fb      	ldrh	r3, [r7, #14]
 8002148:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800214c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b29a      	uxth	r2, r3
 8002154:	89fb      	ldrh	r3, [r7, #14]
 8002156:	4313      	orrs	r3, r2
 8002158:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	89fa      	ldrh	r2, [r7, #14]
 800215e:	831a      	strh	r2, [r3, #24]
}
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8b9b      	ldrh	r3, [r3, #28]
 8002180:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8002182:	89fb      	ldrh	r3, [r7, #14]
 8002184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002188:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800218a:	89fa      	ldrh	r2, [r7, #14]
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	4313      	orrs	r3, r2
 8002190:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	89fa      	ldrh	r2, [r7, #14]
 8002196:	839a      	strh	r2, [r3, #28]
}
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop

080021a4 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	8b9b      	ldrh	r3, [r3, #28]
 80021b8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 80021ba:	89fb      	ldrh	r3, [r7, #14]
 80021bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80021c0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	89fb      	ldrh	r3, [r7, #14]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	89fa      	ldrh	r2, [r7, #14]
 80021d2:	839a      	strh	r2, [r3, #28]
}
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8c1b      	ldrh	r3, [r3, #32]
 80021f4:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 80021f6:	89fb      	ldrh	r3, [r7, #14]
 80021f8:	f023 0302 	bic.w	r3, r3, #2
 80021fc:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 80021fe:	89fa      	ldrh	r2, [r7, #14]
 8002200:	887b      	ldrh	r3, [r7, #2]
 8002202:	4313      	orrs	r3, r2
 8002204:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	89fa      	ldrh	r2, [r7, #14]
 800220a:	841a      	strh	r2, [r3, #32]
}
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop

08002218 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8c1b      	ldrh	r3, [r3, #32]
 800222c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	f023 0308 	bic.w	r3, r3, #8
 8002234:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 8002236:	89fa      	ldrh	r2, [r7, #14]
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	4313      	orrs	r3, r2
 800223c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	89fa      	ldrh	r2, [r7, #14]
 8002242:	841a      	strh	r2, [r3, #32]
}
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop

08002250 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	8c1b      	ldrh	r3, [r3, #32]
 8002264:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8002266:	89fb      	ldrh	r3, [r7, #14]
 8002268:	f023 0320 	bic.w	r3, r3, #32
 800226c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	b29a      	uxth	r2, r3
 8002274:	89fb      	ldrh	r3, [r7, #14]
 8002276:	4313      	orrs	r3, r2
 8002278:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	89fa      	ldrh	r2, [r7, #14]
 800227e:	841a      	strh	r2, [r3, #32]
}
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop

0800228c <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	8c1b      	ldrh	r3, [r3, #32]
 80022a0:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 80022a2:	89fb      	ldrh	r3, [r7, #14]
 80022a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022a8:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	89fb      	ldrh	r3, [r7, #14]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	89fa      	ldrh	r2, [r7, #14]
 80022ba:	841a      	strh	r2, [r3, #32]
}
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop

080022c8 <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	8c1b      	ldrh	r3, [r3, #32]
 80022dc:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 80022de:	89fb      	ldrh	r3, [r7, #14]
 80022e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022e4:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	89fb      	ldrh	r3, [r7, #14]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	89fa      	ldrh	r2, [r7, #14]
 80022f6:	841a      	strh	r2, [r3, #32]
}
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop

08002304 <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	8c1b      	ldrh	r3, [r3, #32]
 8002318:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002320:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	b29a      	uxth	r2, r3
 8002328:	89fb      	ldrh	r3, [r7, #14]
 800232a:	4313      	orrs	r3, r2
 800232c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	89fa      	ldrh	r2, [r7, #14]
 8002332:	841a      	strh	r2, [r3, #32]
}
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop

08002340 <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8c1b      	ldrh	r3, [r3, #32]
 8002354:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8002356:	89fb      	ldrh	r3, [r7, #14]
 8002358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800235c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	031b      	lsls	r3, r3, #12
 8002362:	b29a      	uxth	r2, r3
 8002364:	89fb      	ldrh	r3, [r7, #14]
 8002366:	4313      	orrs	r3, r2
 8002368:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	89fa      	ldrh	r2, [r7, #14]
 800236e:	841a      	strh	r2, [r3, #32]
}
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop

0800237c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	460a      	mov	r2, r1
 8002388:	807a      	strh	r2, [r7, #2]
 800238a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	2201      	movs	r2, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	8c1b      	ldrh	r3, [r3, #32]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	89fb      	ldrh	r3, [r7, #14]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	4013      	ands	r3, r2
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	8c1b      	ldrh	r3, [r3, #32]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	8839      	ldrh	r1, [r7, #0]
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	b29b      	uxth	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	841a      	strh	r2, [r3, #32]
}
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	460a      	mov	r2, r1
 80023dc:	807a      	strh	r2, [r7, #2]
 80023de:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	2204      	movs	r2, #4
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	8c1b      	ldrh	r3, [r3, #32]
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4013      	ands	r3, r2
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	8c1b      	ldrh	r3, [r3, #32]
 8002406:	b29a      	uxth	r2, r3
 8002408:	8839      	ldrh	r1, [r7, #0]
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	b29b      	uxth	r3, r3
 8002412:	4313      	orrs	r3, r2
 8002414:	b29a      	uxth	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	841a      	strh	r2, [r3, #32]
}
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	460a      	mov	r2, r1
 8002430:	807a      	strh	r2, [r7, #2]
 8002432:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3318      	adds	r3, #24
 8002444:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 8002446:	887b      	ldrh	r3, [r7, #2]
 8002448:	2201      	movs	r2, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	8c1b      	ldrh	r3, [r3, #32]
 8002454:	b29a      	uxth	r2, r3
 8002456:	897b      	ldrh	r3, [r7, #10]
 8002458:	43db      	mvns	r3, r3
 800245a:	b29b      	uxth	r3, r3
 800245c:	4013      	ands	r3, r2
 800245e:	b29a      	uxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <TIM_SelectOCxM+0x4c>
 800246a:	887b      	ldrh	r3, [r7, #2]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d112      	bne.n	8002496 <TIM_SelectOCxM+0x72>
  {
    tmp += (TIM_Channel>>1);
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	085b      	lsrs	r3, r3, #1
 8002474:	b29b      	uxth	r3, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4413      	add	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002486:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	6811      	ldr	r1, [r2, #0]
 800248e:	883a      	ldrh	r2, [r7, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e015      	b.n	80024c2 <TIM_SelectOCxM+0x9e>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	3b04      	subs	r3, #4
 800249a:	b29b      	uxth	r3, r3
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	b29b      	uxth	r3, r3
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80024b0:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	6811      	ldr	r1, [r2, #0]
 80024b8:	883a      	ldrh	r2, [r7, #0]
 80024ba:	0212      	lsls	r2, r2, #8
 80024bc:	b292      	uxth	r2, r2
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
  }
}
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e007      	b.n	8002500 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f023 0302 	bic.w	r3, r3, #2
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	801a      	strh	r2, [r3, #0]
  }
}
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop

0800250c <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	b29a      	uxth	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	e007      	b.n	8002540 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	f023 0304 	bic.w	r3, r3, #4
 800253a:	b29a      	uxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	801a      	strh	r2, [r3, #0]
  }
}
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop

0800254c <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	889b      	ldrh	r3, [r3, #4]
 8002562:	b29b      	uxth	r3, r3
 8002564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002568:	b29a      	uxth	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	809a      	strh	r2, [r3, #4]
 800256e:	e007      	b.n	8002580 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	889b      	ldrh	r3, [r3, #4]
 8002574:	b29b      	uxth	r3, r3
 8002576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800257a:	b29a      	uxth	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	809a      	strh	r2, [r3, #4]
  }
}
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop

0800258c <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	f023 0308 	bic.w	r3, r3, #8
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	801a      	strh	r2, [r3, #0]
}
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop

080025c4 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	889b      	ldrh	r3, [r3, #4]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	b29a      	uxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	889b      	ldrh	r3, [r3, #4]
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	809a      	strh	r2, [r3, #4]
}
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop

080025fc <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	891b      	ldrh	r3, [r3, #8]
 800260c:	b29b      	uxth	r3, r3
 800260e:	f023 0307 	bic.w	r3, r3, #7
 8002612:	b29a      	uxth	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	891b      	ldrh	r3, [r3, #8]
 800261c:	b29a      	uxth	r2, r3
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	4313      	orrs	r3, r2
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	811a      	strh	r2, [r3, #8]
}
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop

08002634 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	891b      	ldrh	r3, [r3, #8]
 8002644:	b29b      	uxth	r3, r3
 8002646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800264a:	b29a      	uxth	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	891b      	ldrh	r3, [r3, #8]
 8002654:	b29a      	uxth	r2, r3
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	4313      	orrs	r3, r2
 800265a:	b29a      	uxth	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	811a      	strh	r2, [r3, #8]
}
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop

0800266c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	887a      	ldrh	r2, [r7, #2]
 800267c:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	871a      	strh	r2, [r3, #56]	; 0x38
}
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop

08002718 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8b1b      	ldrh	r3, [r3, #24]
 8002728:	b29b      	uxth	r3, r3
 800272a:	f023 030c 	bic.w	r3, r3, #12
 800272e:	b29a      	uxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8b1b      	ldrh	r3, [r3, #24]
 8002738:	b29a      	uxth	r2, r3
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	4313      	orrs	r3, r2
 800273e:	b29a      	uxth	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	831a      	strh	r2, [r3, #24]
}
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop

08002750 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8b1b      	ldrh	r3, [r3, #24]
 8002760:	b29b      	uxth	r3, r3
 8002762:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002766:	b29a      	uxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8b1b      	ldrh	r3, [r3, #24]
 8002770:	b29a      	uxth	r2, r3
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	b29b      	uxth	r3, r3
 8002778:	4313      	orrs	r3, r2
 800277a:	b29a      	uxth	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	831a      	strh	r2, [r3, #24]
}
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop

0800278c <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	8b9b      	ldrh	r3, [r3, #28]
 800279c:	b29b      	uxth	r3, r3
 800279e:	f023 030c 	bic.w	r3, r3, #12
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	8b9b      	ldrh	r3, [r3, #28]
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	887b      	ldrh	r3, [r7, #2]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	839a      	strh	r2, [r3, #28]
}
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop

080027c4 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	8b9b      	ldrh	r3, [r3, #28]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80027da:	b29a      	uxth	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8b9b      	ldrh	r3, [r3, #28]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	839a      	strh	r2, [r3, #28]
}
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop

08002800 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002816:	b29a      	uxth	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b29a      	uxth	r2, r3
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	4313      	orrs	r3, r2
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	801a      	strh	r2, [r3, #0]
}
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop

08002838 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002844:	b29b      	uxth	r3, r3
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop

08002854 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002860:	b29b      	uxth	r3, r3
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop

08002870 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800287c:	b29b      	uxth	r3, r3
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop

0800288c <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800289a:	b29b      	uxth	r3, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028b4:	b29b      	uxth	r3, r3
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop

080028c4 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	b29b      	uxth	r3, r3
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop

080028e0 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8a1b      	ldrh	r3, [r3, #16]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	4013      	ands	r3, r2
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e001      	b.n	800290a <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002924:	887b      	ldrh	r3, [r7, #2]
 8002926:	43db      	mvns	r3, r3
 8002928:	b29a      	uxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	821a      	strh	r2, [r3, #16]
}
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8002948:	2300      	movs	r3, #0
 800294a:	81bb      	strh	r3, [r7, #12]
 800294c:	2300      	movs	r3, #0
 800294e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8a1b      	ldrh	r3, [r3, #16]
 8002954:	b29a      	uxth	r2, r3
 8002956:	887b      	ldrh	r3, [r7, #2]
 8002958:	4013      	ands	r3, r2
 800295a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	899b      	ldrh	r3, [r3, #12]
 8002960:	b29a      	uxth	r2, r3
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	4013      	ands	r3, r2
 8002966:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002968:	89bb      	ldrh	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <TIM_GetITStatus+0x42>
 800296e:	897b      	ldrh	r3, [r7, #10]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e001      	b.n	800297e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	43db      	mvns	r3, r3
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	821a      	strh	r2, [r3, #16]
}
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	8179      	strh	r1, [r7, #10]
 80029b6:	813a      	strh	r2, [r7, #8]
 80029b8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	82bb      	strh	r3, [r7, #20]
 80029be:	2300      	movs	r3, #0
 80029c0:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8c1b      	ldrh	r3, [r3, #32]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8b1b      	ldrh	r3, [r3, #24]
 80029d6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8c1b      	ldrh	r3, [r3, #32]
 80029dc:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 80029de:	8abb      	ldrh	r3, [r7, #20]
 80029e0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80029e4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	893b      	ldrh	r3, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	8abb      	ldrh	r3, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <TI1_Config+0xc0>)
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d013      	beq.n	8002a28 <TI1_Config+0x7c>
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <TI1_Config+0xc4>)
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d00f      	beq.n	8002a28 <TI1_Config+0x7c>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0e:	d00b      	beq.n	8002a28 <TI1_Config+0x7c>
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <TI1_Config+0xc8>)
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d007      	beq.n	8002a28 <TI1_Config+0x7c>
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <TI1_Config+0xcc>)
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d003      	beq.n	8002a28 <TI1_Config+0x7c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <TI1_Config+0xd0>)
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d10b      	bne.n	8002a40 <TI1_Config+0x94>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8002a28:	8afb      	ldrh	r3, [r7, #22]
 8002a2a:	f023 0302 	bic.w	r3, r3, #2
 8002a2e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002a30:	897a      	ldrh	r2, [r7, #10]
 8002a32:	8afb      	ldrh	r3, [r7, #22]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	82fb      	strh	r3, [r7, #22]
 8002a3e:	e00a      	b.n	8002a56 <TI1_Config+0xaa>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a40:	8afb      	ldrh	r3, [r7, #22]
 8002a42:	f023 030a 	bic.w	r3, r3, #10
 8002a46:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002a48:	897a      	ldrh	r2, [r7, #10]
 8002a4a:	8afb      	ldrh	r3, [r7, #22]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8aba      	ldrh	r2, [r7, #20]
 8002a5a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8afa      	ldrh	r2, [r7, #22]
 8002a60:	841a      	strh	r2, [r3, #32]
}
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40013400 	.word	0x40013400
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800
 8002a7c:	40000c00 	.word	0x40000c00

08002a80 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	8179      	strh	r1, [r7, #10]
 8002a8a:	813a      	strh	r2, [r7, #8]
 8002a8c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	82bb      	strh	r3, [r7, #20]
 8002a92:	2300      	movs	r3, #0
 8002a94:	82fb      	strh	r3, [r7, #22]
 8002a96:	2300      	movs	r3, #0
 8002a98:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8c1b      	ldrh	r3, [r3, #32]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f023 0310 	bic.w	r3, r3, #16
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8b1b      	ldrh	r3, [r3, #24]
 8002aae:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8c1b      	ldrh	r3, [r3, #32]
 8002ab4:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8002ab6:	897b      	ldrh	r3, [r7, #10]
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8002abc:	8abb      	ldrh	r3, [r7, #20]
 8002abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac2:	051b      	lsls	r3, r3, #20
 8002ac4:	0d1b      	lsrs	r3, r3, #20
 8002ac6:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	031b      	lsls	r3, r3, #12
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	8abb      	ldrh	r3, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002ad4:	893b      	ldrh	r3, [r7, #8]
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	8abb      	ldrh	r3, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <TI2_Config+0xd4>)
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d013      	beq.n	8002b10 <TI2_Config+0x90>
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <TI2_Config+0xd8>)
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d00f      	beq.n	8002b10 <TI2_Config+0x90>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af6:	d00b      	beq.n	8002b10 <TI2_Config+0x90>
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <TI2_Config+0xdc>)
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d007      	beq.n	8002b10 <TI2_Config+0x90>
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <TI2_Config+0xe0>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d003      	beq.n	8002b10 <TI2_Config+0x90>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <TI2_Config+0xe4>)
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d10b      	bne.n	8002b28 <TI2_Config+0xa8>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8002b10:	8afb      	ldrh	r3, [r7, #22]
 8002b12:	f023 0320 	bic.w	r3, r3, #32
 8002b16:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002b18:	8a7a      	ldrh	r2, [r7, #18]
 8002b1a:	8afb      	ldrh	r3, [r7, #22]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f043 0310 	orr.w	r3, r3, #16
 8002b24:	82fb      	strh	r3, [r7, #22]
 8002b26:	e00a      	b.n	8002b3e <TI2_Config+0xbe>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b28:	8afb      	ldrh	r3, [r7, #22]
 8002b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b2e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8002b30:	897a      	ldrh	r2, [r7, #10]
 8002b32:	8afb      	ldrh	r3, [r7, #22]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	f043 0310 	orr.w	r3, r3, #16
 8002b3c:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8aba      	ldrh	r2, [r7, #20]
 8002b42:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8afa      	ldrh	r2, [r7, #22]
 8002b48:	841a      	strh	r2, [r3, #32]
}
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	40012c00 	.word	0x40012c00
 8002b58:	40013400 	.word	0x40013400
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40000c00 	.word	0x40000c00

08002b68 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	8179      	strh	r1, [r7, #10]
 8002b72:	813a      	strh	r2, [r7, #8]
 8002b74:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	82bb      	strh	r3, [r7, #20]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	82fb      	strh	r3, [r7, #22]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8c1b      	ldrh	r3, [r3, #32]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8b9b      	ldrh	r3, [r3, #28]
 8002b96:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8c1b      	ldrh	r3, [r3, #32]
 8002b9c:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8002b9e:	897b      	ldrh	r3, [r7, #10]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8002ba4:	8abb      	ldrh	r3, [r7, #20]
 8002ba6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8002baa:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	893b      	ldrh	r3, [r7, #8]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	8abb      	ldrh	r3, [r7, #20]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <TI3_Config+0xcc>)
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d013      	beq.n	8002bee <TI3_Config+0x86>
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <TI3_Config+0xd0>)
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d00f      	beq.n	8002bee <TI3_Config+0x86>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d00b      	beq.n	8002bee <TI3_Config+0x86>
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <TI3_Config+0xd4>)
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d007      	beq.n	8002bee <TI3_Config+0x86>
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <TI3_Config+0xd8>)
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d003      	beq.n	8002bee <TI3_Config+0x86>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <TI3_Config+0xdc>)
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d10b      	bne.n	8002c06 <TI3_Config+0x9e>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8002bee:	8afb      	ldrh	r3, [r7, #22]
 8002bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bf4:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002bf6:	8a7a      	ldrh	r2, [r7, #18]
 8002bf8:	8afb      	ldrh	r3, [r7, #22]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	82fb      	strh	r3, [r7, #22]
 8002c04:	e00a      	b.n	8002c1c <TI3_Config+0xb4>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c06:	8afb      	ldrh	r3, [r7, #22]
 8002c08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002c0c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8002c0e:	897a      	ldrh	r2, [r7, #10]
 8002c10:	8afb      	ldrh	r3, [r7, #22]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1a:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8aba      	ldrh	r2, [r7, #20]
 8002c20:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8afa      	ldrh	r2, [r7, #22]
 8002c26:	841a      	strh	r2, [r3, #32]
}
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40013400 	.word	0x40013400
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40000c00 	.word	0x40000c00

08002c48 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	8179      	strh	r1, [r7, #10]
 8002c52:	813a      	strh	r2, [r7, #8]
 8002c54:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	82bb      	strh	r3, [r7, #20]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	82fb      	strh	r3, [r7, #22]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8c1b      	ldrh	r3, [r3, #32]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8b9b      	ldrh	r3, [r3, #28]
 8002c76:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8c1b      	ldrh	r3, [r3, #32]
 8002c7c:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	031b      	lsls	r3, r3, #12
 8002c82:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8002c84:	8abb      	ldrh	r3, [r7, #20]
 8002c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8a:	051b      	lsls	r3, r3, #20
 8002c8c:	0d1b      	lsrs	r3, r3, #20
 8002c8e:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8002c90:	893b      	ldrh	r3, [r7, #8]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	8abb      	ldrh	r3, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	031b      	lsls	r3, r3, #12
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	8abb      	ldrh	r3, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <TI4_Config+0xd8>)
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d013      	beq.n	8002cd8 <TI4_Config+0x90>
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <TI4_Config+0xdc>)
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d00f      	beq.n	8002cd8 <TI4_Config+0x90>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbe:	d00b      	beq.n	8002cd8 <TI4_Config+0x90>
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <TI4_Config+0xe0>)
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d007      	beq.n	8002cd8 <TI4_Config+0x90>
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <TI4_Config+0xe4>)
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d003      	beq.n	8002cd8 <TI4_Config+0x90>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <TI4_Config+0xe8>)
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d10b      	bne.n	8002cf0 <TI4_Config+0xa8>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8002cd8:	8afb      	ldrh	r3, [r7, #22]
 8002cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cde:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002ce0:	8a7a      	ldrh	r2, [r7, #18]
 8002ce2:	8afb      	ldrh	r3, [r7, #22]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cec:	82fb      	strh	r3, [r7, #22]
 8002cee:	e00c      	b.n	8002d0a <TI4_Config+0xc2>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8002cf0:	8afb      	ldrh	r3, [r7, #22]
 8002cf2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cf6:	045b      	lsls	r3, r3, #17
 8002cf8:	0c5b      	lsrs	r3, r3, #17
 8002cfa:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8002cfc:	897a      	ldrh	r2, [r7, #10]
 8002cfe:	8afb      	ldrh	r3, [r7, #22]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d08:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8aba      	ldrh	r2, [r7, #20]
 8002d0e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8afa      	ldrh	r2, [r7, #22]
 8002d14:	841a      	strh	r2, [r3, #32]
}
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40013400 	.word	0x40013400
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40000800 	.word	0x40000800
 8002d30:	40000c00 	.word	0x40000c00

08002d34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d38:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <SystemInit+0x5c>)
 8002d3a:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <SystemInit+0x5c>)
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002d44:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <SystemInit+0x5c>)
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <SystemInit+0x5c>)
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <SystemInit+0x60>)
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d50:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <SystemInit+0x5c>)
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <SystemInit+0x5c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <SystemInit+0x5c>)
 8002d62:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <SystemInit+0x5c>)
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <SystemInit+0x5c>)
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <SystemInit+0x5c>)
 8002d70:	6852      	ldr	r2, [r2, #4]
 8002d72:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002d76:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <SystemInit+0x5c>)
 8002d7a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002d7e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002d80:	f000 f878 	bl	8002e74 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <SystemInit+0x64>)
 8002d86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d8a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	f8ff0000 	.word	0xf8ff0000
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	2300      	movs	r3, #0
 8002dac:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002dae:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <SystemCoreClockUpdate+0xc4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d007      	beq.n	8002dce <SystemCoreClockUpdate+0x32>
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d009      	beq.n	8002dd6 <SystemCoreClockUpdate+0x3a>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d134      	bne.n	8002e30 <SystemCoreClockUpdate+0x94>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8002dc6:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <SystemCoreClockUpdate+0xc8>)
 8002dc8:	4a27      	ldr	r2, [pc, #156]	; (8002e68 <SystemCoreClockUpdate+0xcc>)
 8002dca:	601a      	str	r2, [r3, #0]
      break;
 8002dcc:	e034      	b.n	8002e38 <SystemCoreClockUpdate+0x9c>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8002dce:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <SystemCoreClockUpdate+0xc8>)
 8002dd0:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <SystemCoreClockUpdate+0xcc>)
 8002dd2:	601a      	str	r2, [r3, #0]
      break;
 8002dd4:	e030      	b.n	8002e38 <SystemCoreClockUpdate+0x9c>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <SystemCoreClockUpdate+0xc4>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002dde:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002de0:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <SystemCoreClockUpdate+0xc4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de8:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	0c9b      	lsrs	r3, r3, #18
 8002dee:	3302      	adds	r3, #2
 8002df0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d106      	bne.n	8002e06 <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <SystemCoreClockUpdate+0xd0>)
 8002dfc:	fb02 f203 	mul.w	r2, r2, r3
 8002e00:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <SystemCoreClockUpdate+0xc8>)
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e013      	b.n	8002e2e <SystemCoreClockUpdate+0x92>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <SystemCoreClockUpdate+0xc4>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <SystemCoreClockUpdate+0x84>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <SystemCoreClockUpdate+0xd0>)
 8002e16:	fb02 f203 	mul.w	r2, r2, r3
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <SystemCoreClockUpdate+0xc8>)
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e006      	b.n	8002e2e <SystemCoreClockUpdate+0x92>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <SystemCoreClockUpdate+0xcc>)
 8002e24:	fb02 f203 	mul.w	r2, r2, r3
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <SystemCoreClockUpdate+0xc8>)
 8002e2a:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8002e2c:	e004      	b.n	8002e38 <SystemCoreClockUpdate+0x9c>
 8002e2e:	e003      	b.n	8002e38 <SystemCoreClockUpdate+0x9c>

    default:
      SystemCoreClock = HSI_VALUE;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <SystemCoreClockUpdate+0xc8>)
 8002e32:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <SystemCoreClockUpdate+0xcc>)
 8002e34:	601a      	str	r2, [r3, #0]
      break;
 8002e36:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <SystemCoreClockUpdate+0xc4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	4a0b      	ldr	r2, [pc, #44]	; (8002e70 <SystemCoreClockUpdate+0xd4>)
 8002e44:	5cd3      	ldrb	r3, [r2, r3]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <SystemCoreClockUpdate+0xc8>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	40da      	lsrs	r2, r3
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <SystemCoreClockUpdate+0xc8>)
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40021000 	.word	0x40021000
 8002e64:	20000014 	.word	0x20000014
 8002e68:	007a1200 	.word	0x007a1200
 8002e6c:	003d0900 	.word	0x003d0900
 8002e70:	20000018 	.word	0x20000018

08002e74 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002e78:	f000 f802 	bl	8002e80 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop

08002e80 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002e8e:	4b3a      	ldr	r3, [pc, #232]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002e90:	4a39      	ldr	r2, [pc, #228]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e98:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002e9a:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <SetSysClockTo72+0x38>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002eb6:	d1f0      	bne.n	8002e9a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002eb8:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	e001      	b.n	8002ece <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d14b      	bne.n	8002f6c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002ed4:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <SetSysClockTo72+0xfc>)
 8002ed6:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <SetSysClockTo72+0xfc>)
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	f042 0210 	orr.w	r2, r2, #16
 8002ede:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002ee0:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <SetSysClockTo72+0xfc>)
 8002ee2:	4a26      	ldr	r2, [pc, #152]	; (8002f7c <SetSysClockTo72+0xfc>)
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	f022 0203 	bic.w	r2, r2, #3
 8002eea:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002eec:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <SetSysClockTo72+0xfc>)
 8002eee:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <SetSysClockTo72+0xfc>)
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	f042 0202 	orr.w	r2, r2, #2
 8002ef6:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002ef8:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002efa:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002efc:	6852      	ldr	r2, [r2, #4]
 8002efe:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f04:	6852      	ldr	r2, [r2, #4]
 8002f06:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f0a:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f0c:	6852      	ldr	r2, [r2, #4]
 8002f0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f12:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f16:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f18:	6852      	ldr	r2, [r2, #4]
 8002f1a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8002f1e:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f22:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f24:	6852      	ldr	r2, [r2, #4]
 8002f26:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8002f2a:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002f36:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002f38:	bf00      	nop
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f9      	beq.n	8002f3a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f48:	4a0b      	ldr	r2, [pc, #44]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f4a:	6852      	ldr	r2, [r2, #4]
 8002f4c:	f022 0203 	bic.w	r2, r2, #3
 8002f50:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f54:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f56:	6852      	ldr	r2, [r2, #4]
 8002f58:	f042 0202 	orr.w	r2, r2, #2
 8002f5c:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002f5e:	bf00      	nop
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <SetSysClockTo72+0xf8>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d1f9      	bne.n	8002f60 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40022000 	.word	0x40022000

08002f80 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
 8002f80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f82:	e003      	b.n	8002f8c <LoopCopyDataInit>

08002f84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 8002f86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f8a:	3104      	adds	r1, #4

08002f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f8c:	4809      	ldr	r0, [pc, #36]	; (8002fb4 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 8002f90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f94:	d3f6      	bcc.n	8002f84 <CopyDataInit>
	ldr	r2, =_sbss
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 8002f98:	e002      	b.n	8002fa0 <LoopFillZerobss>

08002f9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
 8002f9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f9c:	f842 3b04 	str.w	r3, [r2], #4

08002fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <LoopFillZerobss+0x20>)
	cmp	r2, r3
 8002fa2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002fa4:	d3f9      	bcc.n	8002f9a <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
 8002fa6:	f7ff fec5 	bl	8002d34 <SystemInit>
/* Call the application's entry point.*/
	bl	main
 8002faa:	f7fd f8ed 	bl	8000188 <main>
	bx	lr    
 8002fae:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8002fb0:	00000120 	.word	0x00000120
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 8002fb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002fb8:	20000028 	.word	0x20000028
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8002fbc:	20000028 	.word	0x20000028
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
 8002fc0:	20000028 	.word	0x20000028

08002fc4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fc4:	e7fe      	b.n	8002fc4 <ADC1_2_IRQHandler>
	...
